/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockMessengerInterface extends utils.Interface {
  contractName: "MockMessenger";
  functions: {
    "lastCaller()": FunctionFragment;
    "lastGasLimit()": FunctionFragment;
    "lastMessage()": FunctionFragment;
    "lastTarget()": FunctionFragment;
    "sendMessage(address,bytes,uint32)": FunctionFragment;
    "setLastCaller(address)": FunctionFragment;
    "xDomainMessageSender()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lastCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastCaller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "xDomainMessageSender",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "lastCaller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastTarget", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xDomainMessageSender",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockMessenger extends BaseContract {
  contractName: "MockMessenger";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockMessengerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lastCaller(overrides?: CallOverrides): Promise<[string]>;

    "lastCaller()"(overrides?: CallOverrides): Promise<[string]>;

    lastGasLimit(overrides?: CallOverrides): Promise<[number]>;

    "lastGasLimit()"(overrides?: CallOverrides): Promise<[number]>;

    lastMessage(overrides?: CallOverrides): Promise<[string]>;

    "lastMessage()"(overrides?: CallOverrides): Promise<[string]>;

    lastTarget(overrides?: CallOverrides): Promise<[string]>;

    "lastTarget()"(overrides?: CallOverrides): Promise<[string]>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sendMessage(address,bytes,uint32)"(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLastCaller(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLastCaller(address)"(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<[string]>;

    "xDomainMessageSender()"(overrides?: CallOverrides): Promise<[string]>;
  };

  lastCaller(overrides?: CallOverrides): Promise<string>;

  "lastCaller()"(overrides?: CallOverrides): Promise<string>;

  lastGasLimit(overrides?: CallOverrides): Promise<number>;

  "lastGasLimit()"(overrides?: CallOverrides): Promise<number>;

  lastMessage(overrides?: CallOverrides): Promise<string>;

  "lastMessage()"(overrides?: CallOverrides): Promise<string>;

  lastTarget(overrides?: CallOverrides): Promise<string>;

  "lastTarget()"(overrides?: CallOverrides): Promise<string>;

  sendMessage(
    _target: string,
    _message: BytesLike,
    _gasLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sendMessage(address,bytes,uint32)"(
    _target: string,
    _message: BytesLike,
    _gasLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLastCaller(
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLastCaller(address)"(
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xDomainMessageSender(overrides?: CallOverrides): Promise<string>;

  "xDomainMessageSender()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    lastCaller(overrides?: CallOverrides): Promise<string>;

    "lastCaller()"(overrides?: CallOverrides): Promise<string>;

    lastGasLimit(overrides?: CallOverrides): Promise<number>;

    "lastGasLimit()"(overrides?: CallOverrides): Promise<number>;

    lastMessage(overrides?: CallOverrides): Promise<string>;

    "lastMessage()"(overrides?: CallOverrides): Promise<string>;

    lastTarget(overrides?: CallOverrides): Promise<string>;

    "lastTarget()"(overrides?: CallOverrides): Promise<string>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendMessage(address,bytes,uint32)"(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLastCaller(_caller: string, overrides?: CallOverrides): Promise<void>;

    "setLastCaller(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<string>;

    "xDomainMessageSender()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    lastCaller(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCaller()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "lastGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastMessage(overrides?: CallOverrides): Promise<BigNumber>;

    "lastMessage()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastTarget(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTarget()"(overrides?: CallOverrides): Promise<BigNumber>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sendMessage(address,bytes,uint32)"(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLastCaller(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLastCaller(address)"(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<BigNumber>;

    "xDomainMessageSender()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    lastCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastCaller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastGasLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastMessage()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastTarget()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sendMessage(address,bytes,uint32)"(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLastCaller(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLastCaller(address)"(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xDomainMessageSender(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "xDomainMessageSender()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
