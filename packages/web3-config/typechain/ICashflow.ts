/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ICashflowInterface extends utils.Interface {
  contractName: "ICashflow";
  functions: {
    "editNFT(uint256,int96,address)": FunctionFragment;
    "getAcceptedToken()": FunctionFragment;
    "getFlow(address)": FunctionFragment;
    "isAllowed(bytes32)": FunctionFragment;
    "issueNFT(address,int96,uint256)": FunctionFragment;
    "setAcceptedToken(address)": FunctionFragment;
    "updateHolder(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "editNFT",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAcceptedToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFlow", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueNFT",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAcceptedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHolder",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "editNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAcceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issueNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAcceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateHolder",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICashflow extends BaseContract {
  contractName: "ICashflow";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICashflowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    editNFT(
      tokenId: BigNumberish,
      flowRate: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "editNFT(uint256,int96,address)"(
      tokenId: BigNumberish,
      flowRate: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAcceptedToken(overrides?: CallOverrides): Promise<[string]>;

    "getAcceptedToken()"(overrides?: CallOverrides): Promise<[string]>;

    getFlow(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    "getFlow(address)"(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    isAllowed(_id: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "isAllowed(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issueNFT(
      receiver: string,
      flowRate: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "issueNFT(address,int96,uint256)"(
      receiver: string,
      flowRate: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAcceptedToken(
      _acceptedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAcceptedToken(address)"(
      _acceptedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateHolder(
      oldReceiver: string,
      newReceiver: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateHolder(address,address,uint256)"(
      oldReceiver: string,
      newReceiver: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  editNFT(
    tokenId: BigNumberish,
    flowRate: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "editNFT(uint256,int96,address)"(
    tokenId: BigNumberish,
    flowRate: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAcceptedToken(overrides?: CallOverrides): Promise<string>;

  "getAcceptedToken()"(overrides?: CallOverrides): Promise<string>;

  getFlow(
    _receiver: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      flowRate: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  "getFlow(address)"(
    _receiver: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      flowRate: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  isAllowed(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isAllowed(bytes32)"(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issueNFT(
    receiver: string,
    flowRate: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "issueNFT(address,int96,uint256)"(
    receiver: string,
    flowRate: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAcceptedToken(
    _acceptedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAcceptedToken(address)"(
    _acceptedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateHolder(
    oldReceiver: string,
    newReceiver: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateHolder(address,address,uint256)"(
    oldReceiver: string,
    newReceiver: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    editNFT(
      tokenId: BigNumberish,
      flowRate: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "editNFT(uint256,int96,address)"(
      tokenId: BigNumberish,
      flowRate: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAcceptedToken(overrides?: CallOverrides): Promise<string>;

    "getAcceptedToken()"(overrides?: CallOverrides): Promise<string>;

    getFlow(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    "getFlow(address)"(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    isAllowed(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "isAllowed(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueNFT(
      receiver: string,
      flowRate: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "issueNFT(address,int96,uint256)"(
      receiver: string,
      flowRate: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAcceptedToken(
      _acceptedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAcceptedToken(address)"(
      _acceptedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateHolder(
      oldReceiver: string,
      newReceiver: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateHolder(address,address,uint256)"(
      oldReceiver: string,
      newReceiver: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    editNFT(
      tokenId: BigNumberish,
      flowRate: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "editNFT(uint256,int96,address)"(
      tokenId: BigNumberish,
      flowRate: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAcceptedToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getAcceptedToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFlow(_receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getFlow(address)"(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowed(_id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "isAllowed(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueNFT(
      receiver: string,
      flowRate: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "issueNFT(address,int96,uint256)"(
      receiver: string,
      flowRate: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAcceptedToken(
      _acceptedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAcceptedToken(address)"(
      _acceptedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateHolder(
      oldReceiver: string,
      newReceiver: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateHolder(address,address,uint256)"(
      oldReceiver: string,
      newReceiver: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    editNFT(
      tokenId: BigNumberish,
      flowRate: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "editNFT(uint256,int96,address)"(
      tokenId: BigNumberish,
      flowRate: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAcceptedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAcceptedToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlow(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFlow(address)"(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowed(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllowed(bytes32)"(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueNFT(
      receiver: string,
      flowRate: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "issueNFT(address,int96,uint256)"(
      receiver: string,
      flowRate: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAcceptedToken(
      _acceptedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAcceptedToken(address)"(
      _acceptedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateHolder(
      oldReceiver: string,
      newReceiver: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateHolder(address,address,uint256)"(
      oldReceiver: string,
      newReceiver: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
