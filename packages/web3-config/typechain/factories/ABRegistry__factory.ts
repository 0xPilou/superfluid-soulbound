/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ABRegistry, ABRegistryInterface } from "../ABRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_relay",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FORBIDDEN",
    type: "error",
  },
  {
    inputs: [],
    name: "INVALID_PARAMETER",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_dropId",
        type: "uint256",
      },
    ],
    name: "getUserBalancePerDrop",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_dropId",
        type: "uint256",
      },
    ],
    name: "updateBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161053838038061053883398101604081905261002f916100d4565b61003833610084565b6001600160a01b03811661005f57604051632627b42d60e11b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055610104565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100e657600080fd5b81516001600160a01b03811681146100fd57600080fd5b9392505050565b610425806101136000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806334954a991461005c578063715018a6146100715780638da5cb5b14610079578063e04cc2d71461009e578063f2fde38b146100bf575b600080fd5b61006f61006a36600461032b565b6100d2565b005b61006f610194565b6100816101a8565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b16100ac366004610367565b6101b7565b604051908152602001610095565b61006f6100cd366004610391565b6101e2565b6001546001600160a01b031633146100fd5760405163036be76f60e61b815260040160405180910390fd5b6001600160a01b03831615610146576001600160a01b038316600090815260026020908152604080832084845290915281208054600192906101409084906103c9565b90915550505b6001600160a01b0382161561018f576001600160a01b038216600090815260026020908152604080832084845290915281208054600192906101899084906103dc565b90915550505b505050565b61019c610260565b6101a660006102bf565b565b6000546001600160a01b031690565b6001600160a01b03821660009081526002602090815260408083208484529091529020545b92915050565b6101ea610260565b6001600160a01b0381166102545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61025d816102bf565b50565b336102696101a8565b6001600160a01b0316146101a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461032657600080fd5b919050565b60008060006060848603121561034057600080fd5b6103498461030f565b92506103576020850161030f565b9150604084013590509250925092565b6000806040838503121561037a57600080fd5b6103838361030f565b946020939093013593505050565b6000602082840312156103a357600080fd5b6103ac8261030f565b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156101dc576101dc6103b3565b808201808211156101dc576101dc6103b356fea26469706673582212201312c2caf6af23729c668da1a91cdeaaecf5945d6602233eaa76fb5c3804889864736f6c63430008100033";

type ABRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ABRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ABRegistry__factory extends ContractFactory {
  constructor(...args: ABRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ABRegistry";
  }

  deploy(
    _relay: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ABRegistry> {
    return super.deploy(_relay, overrides || {}) as Promise<ABRegistry>;
  }
  getDeployTransaction(
    _relay: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_relay, overrides || {});
  }
  attach(address: string): ABRegistry {
    return super.attach(address) as ABRegistry;
  }
  connect(signer: Signer): ABRegistry__factory {
    return super.connect(signer) as ABRegistry__factory;
  }
  static readonly contractName: "ABRegistry";
  public readonly contractName: "ABRegistry";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ABRegistryInterface {
    return new utils.Interface(_abi) as ABRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ABRegistry {
    return new Contract(address, _abi, signerOrProvider) as ABRegistry;
  }
}
