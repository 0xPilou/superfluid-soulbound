/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ABRegistry, ABRegistryInterface } from "../ABRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_relay",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FORBIDDEN",
    type: "error",
  },
  {
    inputs: [],
    name: "INVALID_PARAMETER",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_dropId",
        type: "uint256",
      },
    ],
    name: "decrementUserBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_dropId",
        type: "uint256",
      },
    ],
    name: "getUserBalancePerDrop",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_dropId",
        type: "uint256",
      },
    ],
    name: "incrementUserBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161051f38038061051f83398101604081905261002f916100d4565b61003833610084565b6001600160a01b03811661005f57604051632627b42d60e11b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055610104565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100e657600080fd5b81516001600160a01b03811681146100fd57600080fd5b9392505050565b61040c806101136000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a61461006757806376e1f451146100715780638ba85471146100845780638da5cb5b14610097578063e04cc2d7146100bc578063f2fde38b146100dd575b600080fd5b61006f6100f0565b005b61006f61007f36600461034e565b610104565b61006f61009236600461034e565b61016c565b61009f6101cb565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cf6100ca36600461034e565b6101da565b6040519081526020016100b3565b61006f6100eb366004610378565b610205565b6100f8610283565b61010260006102e2565b565b6001546001600160a01b0316331461012f5760405163036be76f60e61b815260040160405180910390fd5b6001600160a01b038216600090815260026020908152604080832084845290915281208054600192906101639084906103b0565b90915550505050565b6001546001600160a01b031633146101975760405163036be76f60e61b815260040160405180910390fd5b6001600160a01b038216600090815260026020908152604080832084845290915281208054600192906101639084906103c3565b6000546001600160a01b031690565b6001600160a01b03821660009081526002602090815260408083208484529091529020545b92915050565b61020d610283565b6001600160a01b0381166102775760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610280816102e2565b50565b3361028c6101cb565b6001600160a01b0316146101025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161026e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461034957600080fd5b919050565b6000806040838503121561036157600080fd5b61036a83610332565b946020939093013593505050565b60006020828403121561038a57600080fd5b61039382610332565b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156101ff576101ff61039a565b808201808211156101ff576101ff61039a56fea2646970667358221220427b08e87042a76fbefa4e6d627bef3eb50abb0df8b4ec74496f89b53ed105e764736f6c63430008100033";

type ABRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ABRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ABRegistry__factory extends ContractFactory {
  constructor(...args: ABRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ABRegistry";
  }

  deploy(
    _relay: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ABRegistry> {
    return super.deploy(_relay, overrides || {}) as Promise<ABRegistry>;
  }
  getDeployTransaction(
    _relay: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_relay, overrides || {});
  }
  attach(address: string): ABRegistry {
    return super.attach(address) as ABRegistry;
  }
  connect(signer: Signer): ABRegistry__factory {
    return super.connect(signer) as ABRegistry__factory;
  }
  static readonly contractName: "ABRegistry";
  public readonly contractName: "ABRegistry";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ABRegistryInterface {
    return new utils.Interface(_abi) as ABRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ABRegistry {
    return new Contract(address, _abi, signerOrProvider) as ABRegistry;
  }
}
