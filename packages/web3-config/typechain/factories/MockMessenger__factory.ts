/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockMessenger, MockMessengerInterface } from "../MockMessenger";

const _abi = [
  {
    inputs: [],
    name: "lastCaller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastGasLimit",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastMessage",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTarget",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
      {
        internalType: "uint32",
        name: "_gasLimit",
        type: "uint32",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
    ],
    name: "setLastCaller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "xDomainMessageSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610551806100206000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c80632113522a1461007257806332970710146100a957806336abbd1d146100be5780633dbb202b146100d1578063473c6582146100e65780636e296e451461012057806373d52d5a14610138575b600080fd5b60025461008c90600160201b90046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b161015d565b6040516100a0919061024c565b60005461008c906001600160a01b031681565b6100e46100df3660046102e0565b6101eb565b005b6100e46100f43660046103b1565b600280546001600160a01b03909216600160201b02600160201b600160c01b0319909216919091179055565b600254600160201b90046001600160a01b031661008c565b6002546101489063ffffffff1681565b60405163ffffffff90911681526020016100a0565b6001805461016a906103d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610196906103d3565b80156101e35780601f106101b8576101008083540402835291602001916101e3565b820191906000526020600020905b8154815290600101906020018083116101c657829003601f168201915b505050505081565b60028054600160201b600160c01b03191633600160201b02179055600080546001600160a01b0319166001600160a01b038516179055600161022d838261045c565b506002805463ffffffff191663ffffffff929092169190911790555050565b600060208083528351808285015260005b818110156102795785810183015185820160400152820161025d565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146102b157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b803563ffffffff811681146102b157600080fd5b6000806000606084860312156102f557600080fd5b6102fe8461029a565b925060208401356001600160401b038082111561031a57600080fd5b818601915086601f83011261032e57600080fd5b813581811115610340576103406102b6565b604051601f8201601f19908116603f01168101908382118183101715610368576103686102b6565b8160405282815289602084870101111561038157600080fd5b8260208601602083013760006020848301015280965050505050506103a8604085016102cc565b90509250925092565b6000602082840312156103c357600080fd5b6103cc8261029a565b9392505050565b600181811c908216806103e757607f821691505b60208210810361040757634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561045757600081815260208120601f850160051c810160208610156104345750805b601f850160051c820191505b8181101561045357828155600101610440565b5050505b505050565b81516001600160401b03811115610475576104756102b6565b6104898161048384546103d3565b8461040d565b602080601f8311600181146104be57600084156104a65750858301515b600019600386901b1c1916600185901b178555610453565b600085815260208120601f198616915b828110156104ed578886015182559484019460019091019084016104ce565b508582101561050b5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212207434eac0f48be44a4866edbfa461692a4bab75c5792b6e5ef37e970c1a09caa964736f6c63430008100033";

type MockMessengerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockMessengerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockMessenger__factory extends ContractFactory {
  constructor(...args: MockMessengerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockMessenger";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockMessenger> {
    return super.deploy(overrides || {}) as Promise<MockMessenger>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockMessenger {
    return super.attach(address) as MockMessenger;
  }
  connect(signer: Signer): MockMessenger__factory {
    return super.connect(signer) as MockMessenger__factory;
  }
  static readonly contractName: "MockMessenger";
  public readonly contractName: "MockMessenger";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockMessengerInterface {
    return new utils.Interface(_abi) as MockMessengerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockMessenger {
    return new Contract(address, _abi, signerOrProvider) as MockMessenger;
  }
}
