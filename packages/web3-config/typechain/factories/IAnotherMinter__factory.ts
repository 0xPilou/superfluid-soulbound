/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IAnotherMinter,
  IAnotherMinterInterface,
} from "../IAnotherMinter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_dropId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_quantity",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "_proof",
        type: "bytes32[]",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_newBaseURI",
        type: "string",
      },
    ],
    name: "setBaseURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dropId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "phaseStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxMint",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "merkle",
            type: "bytes32",
          },
        ],
        internalType: "struct ABDropManager.Phase[]",
        name: "_phases",
        type: "tuple[]",
      },
    ],
    name: "setDropPhases",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IAnotherMinter__factory {
  static readonly abi = _abi;
  static createInterface(): IAnotherMinterInterface {
    return new utils.Interface(_abi) as IAnotherMinterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAnotherMinter {
    return new Contract(address, _abi, signerOrProvider) as IAnotherMinter;
  }
}
