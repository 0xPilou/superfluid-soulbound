/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LibAddressManager,
  LibAddressManagerInterface,
} from "../LibAddressManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_newAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_oldAddress",
        type: "address",
      },
    ],
    name: "AddressSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "getAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "setAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104e18061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780638da5cb5b146100665780639b2ea4bd1461008a578063bf40fac11461009d578063f2fde38b146100b0575b600080fd5b6100646100c3565b005b61006e6100d7565b6040516001600160a01b03909116815260200160405180910390f35b6100646100983660046103d1565b6100e6565b61006e6100ab36600461041e565b610187565b6100646100be36600461045a565b6101b6565b6100cb610234565b6100d56000610293565b565b6000546001600160a01b031690565b6100ee610234565b60006100f9836102e3565b6000818152600160205260409081902080546001600160a01b038681166001600160a01b03198316179092559151929350169061013790859061047c565b604080519182900382206001600160a01b03808716845284166020840152917f9416a153a346f93d95f94b064ae3f148b6460473c6e82b3f9fc2521b873fcd6c910160405180910390a250505050565b600060016000610196846102e3565b81526020810191909152604001600020546001600160a01b031692915050565b6101be610234565b6001600160a01b0381166102285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61023181610293565b50565b3361023d6100d7565b6001600160a01b0316146100d55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161021f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000816040516020016102f6919061047c565b604051602081830303815290604052805190602001209050919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261033a57600080fd5b81356001600160401b038082111561035457610354610313565b604051601f8301601f19908116603f0116810190828211818310171561037c5761037c610313565b8160405283815286602085880101111561039557600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146103cc57600080fd5b919050565b600080604083850312156103e457600080fd5b82356001600160401b038111156103fa57600080fd5b61040685828601610329565b925050610415602084016103b5565b90509250929050565b60006020828403121561043057600080fd5b81356001600160401b0381111561044657600080fd5b61045284828501610329565b949350505050565b60006020828403121561046c57600080fd5b610475826103b5565b9392505050565b6000825160005b8181101561049d5760208186018101518583015201610483565b50600092019182525091905056fea264697066735822122075b9a49dc1415bd25cbdfe6f306f8e5fcfd61bc20a887ebc8e34d362727d6a1764736f6c63430008100033";

type LibAddressManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibAddressManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibAddressManager__factory extends ContractFactory {
  constructor(...args: LibAddressManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "LibAddressManager";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibAddressManager> {
    return super.deploy(overrides || {}) as Promise<LibAddressManager>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibAddressManager {
    return super.attach(address) as LibAddressManager;
  }
  connect(signer: Signer): LibAddressManager__factory {
    return super.connect(signer) as LibAddressManager__factory;
  }
  static readonly contractName: "LibAddressManager";
  public readonly contractName: "LibAddressManager";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibAddressManagerInterface {
    return new utils.Interface(_abi) as LibAddressManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibAddressManager {
    return new Contract(address, _abi, signerOrProvider) as LibAddressManager;
  }
}
