/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ABRelay, ABRelayInterface } from "../ABRelay";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "createdDrop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
    ],
    name: "grantAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int96",
        name: "_flowRate",
        type: "int96",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "issuedNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
    ],
    name: "revokeAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_abStream",
        type: "address",
      },
    ],
    name: "setABStream",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "transferredNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updatedDrop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600280546001600160a01b03191673420000000000000000000000000000000000000717905534801561003657600080fd5b5061004033610045565b610095565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610710806100a46000396000f3fe608060405234801561001057600080fd5b506004361061008e5760003560e01c80630148f9e514610093578063709bb22f146100a8578063715018a6146100b05780637ea41543146100b85780638da5cb5b146100cb578063a9cf5514146100ef578063ad11fe4414610102578063c2df4e3914610115578063f07d9a44146100a8578063f2fde38b14610128575b600080fd5b6100a66100a1366004610626565b61013b565b005b6100a6610165565b6100a661021e565b6100a66100c6366004610626565b610230565b6100d361025f565b6040516001600160a01b03909116815260200160405180910390f35b6100a66100fd36600461064a565b61026e565b6100a6610110366004610626565b610398565b6100a661012336600461068b565b6103c1565b6100a6610136366004610626565b6104e4565b610143610562565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633148015610213575060016000600260009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f591906106bd565b6001600160a01b0316815260208101919091526040016000205460ff165b61021c57600080fd5b565b610226610562565b61021c60006105c1565b610238610562565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b031690565b6002546001600160a01b03163314801561031c575060016000600260009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe91906106bd565b6001600160a01b0316815260208101919091526040016000205460ff165b61032557600080fd5b6003546040516321a23ca360e11b81526001600160a01b03858116600483015284811660248301526044820184905290911690634344794690606401600060405180830381600087803b15801561037b57600080fd5b505af115801561038f573d6000803e3d6000fd5b50505050505050565b6103a0610562565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6002546001600160a01b03163314801561046f575060016000600260009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906106bd565b6001600160a01b0316815260208101919091526040016000205460ff165b61047857600080fd5b60035460405163693c623d60e01b8152600b84900b6004820152602481018390526001600160a01b039091169063693c623d90604401600060405180830381600087803b1580156104c857600080fd5b505af11580156104dc573d6000803e3d6000fd5b505050505050565b6104ec610562565b6001600160a01b0381166105565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61055f816105c1565b50565b3361056b61025f565b6001600160a01b03161461021c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161054d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461055f57600080fd5b60006020828403121561063857600080fd5b813561064381610611565b9392505050565b60008060006060848603121561065f57600080fd5b833561066a81610611565b9250602084013561067a81610611565b929592945050506040919091013590565b6000806040838503121561069e57600080fd5b823580600b0b81146106af57600080fd5b946020939093013593505050565b6000602082840312156106cf57600080fd5b81516106438161061156fea26469706673582212203c0393bd9fa435b95aba1002143eb90056de555b7714b0e5b467f0537ff9bdb964736f6c63430008100033";

type ABRelayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ABRelayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ABRelay__factory extends ContractFactory {
  constructor(...args: ABRelayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ABRelay";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ABRelay> {
    return super.deploy(overrides || {}) as Promise<ABRelay>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ABRelay {
    return super.attach(address) as ABRelay;
  }
  connect(signer: Signer): ABRelay__factory {
    return super.connect(signer) as ABRelay__factory;
  }
  static readonly contractName: "ABRelay";
  public readonly contractName: "ABRelay";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ABRelayInterface {
    return new utils.Interface(_abi) as ABRelayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ABRelay {
    return new Contract(address, _abi, signerOrProvider) as ABRelay;
  }
}
