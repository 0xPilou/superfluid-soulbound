/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ABRelay, ABRelayInterface } from "../ABRelay";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "int96",
        name: "_baseFlow",
        type: "int96",
      },
      {
        internalType: "uint256",
        name: "_dropId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_rightholder",
        type: "address",
      },
    ],
    name: "createdDrop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_abRegistry",
        type: "address",
      },
    ],
    name: "setABRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_abStream",
        type: "address",
      },
    ],
    name: "setABStream",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_authorization",
        type: "bool",
      },
    ],
    name: "setAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_dropId",
        type: "uint256",
      },
    ],
    name: "transferredNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updatedDrop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6109f2806100ed6000396000f3fe608060405234801561001057600080fd5b506004361061008e5760003560e01c80630148f9e5146100935780632f419715146100a85780636919ce17146100bb578063715018a6146100ce5780638129fc1c146100d65780638da5cb5b146100de578063a9cf551414610102578063f07d9a4414610115578063f2fde38b1461011d578063fa51453f14610130575b600080fd5b6100a66100a1366004610845565b610143565b005b6100a66100b6366004610869565b61016d565b6100a66100c93660046108b1565b6102f8565b6100a661032b565b6100a661033f565b6100e661046e565b6040516001600160a01b03909116815260200160405180910390f35b6100a66101103660046108ef565b61047d565b6100a66105ce565b6100a661012b366004610845565b610685565b6100a661013e366004610845565b6106fb565b61014b610725565b606780546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b03163314801561021b575060656000606660009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fd9190610930565b6001600160a01b0316815260208101919091526040016000205460ff165b61022457600080fd5b6068546040516340b3500f60e11b8152600481018490526001600160a01b03838116602483015290911690638166a01e90604401600060405180830381600087803b15801561027257600080fd5b505af1158015610286573d6000803e3d6000fd5b505060675460405163048d426360e51b8152600b87900b6004820152602481018690526001600160a01b0390911692506391a84c6091506044015b600060405180830381600087803b1580156102db57600080fd5b505af11580156102ef573d6000803e3d6000fd5b50505050505050565b610300610725565b6001600160a01b03919091166000908152606560205260409020805460ff1916911515919091179055565b610333610725565b61033d6000610784565b565b600054610100900460ff161580801561035f5750600054600160ff909116105b806103795750303b158015610379575060005460ff166001145b6103e15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610404576000805461ff0019166101001790555b606680546001600160a01b0319166007602160991b011790556104256107d6565b801561046b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6033546001600160a01b031690565b6066546001600160a01b03163314801561052b575060656000606660009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050d9190610930565b6001600160a01b0316815260208101919091526040016000205460ff165b61053457600080fd5b6068546040516334954a9960e01b81526001600160a01b03909116906334954a99906105689086908690869060040161094d565b600060405180830381600087803b15801561058257600080fd5b505af1158015610596573d6000803e3d6000fd5b50506067546040516321a23ca360e11b81526001600160a01b039091169250634344794691506102c19086908690869060040161094d565b6066546001600160a01b03163314801561067c575060656000606660009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e9190610930565b6001600160a01b0316815260208101919091526040016000205460ff165b61033d57600080fd5b61068d610725565b6001600160a01b0381166106f25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d8565b61046b81610784565b610703610725565b606880546001600160a01b0319166001600160a01b0392909216919091179055565b3361072e61046e565b6001600160a01b03161461033d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103d8565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166107fd5760405162461bcd60e51b81526004016103d890610971565b61033d600054610100900460ff166108275760405162461bcd60e51b81526004016103d890610971565b61033d33610784565b6001600160a01b038116811461046b57600080fd5b60006020828403121561085757600080fd5b813561086281610830565b9392505050565b60008060006060848603121561087e57600080fd5b833580600b0b811461088f57600080fd5b92506020840135915060408401356108a681610830565b809150509250925092565b600080604083850312156108c457600080fd5b82356108cf81610830565b9150602083013580151581146108e457600080fd5b809150509250929050565b60008060006060848603121561090457600080fd5b833561090f81610830565b9250602084013561091f81610830565b929592945050506040919091013590565b60006020828403121561094257600080fd5b815161086281610830565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220c1e74741050ff4ea51848bbc301b5d26af526f5738748e62f205936471a2c94664736f6c63430008100033";

type ABRelayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ABRelayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ABRelay__factory extends ContractFactory {
  constructor(...args: ABRelayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ABRelay";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ABRelay> {
    return super.deploy(overrides || {}) as Promise<ABRelay>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ABRelay {
    return super.attach(address) as ABRelay;
  }
  connect(signer: Signer): ABRelay__factory {
    return super.connect(signer) as ABRelay__factory;
  }
  static readonly contractName: "ABRelay";
  public readonly contractName: "ABRelay";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ABRelayInterface {
    return new utils.Interface(_abi) as ABRelayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ABRelay {
    return new Contract(address, _abi, signerOrProvider) as ABRelay;
  }
}
