/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnotherRelay, AnotherRelayInterface } from "../AnotherRelay";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "createdDrop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
    ],
    name: "grantAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "issuedNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
    ],
    name: "revokeAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "transferredNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updatedDrop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600280546001600160a01b03191673420000000000000000000000000000000000000717905534801561003657600080fd5b5061004033610045565b610095565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103e2806100a46000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c80636d00c30a14610088578063709bb22f14610088578063715018a6146100925780637ea415431461009a5780638da5cb5b146100ad578063ad11fe44146100d1578063af23204014610088578063f07d9a4414610088578063f2fde38b146100e4575b600080fd5b6100906100f7565b005b6100906101b0565b6100906100a836600461036b565b6101c2565b6100b56101f1565b6040516001600160a01b03909116815260200160405180910390f35b6100906100df36600461036b565b610200565b6100906100f236600461036b565b610229565b6002546001600160a01b0316331480156101a5575060016000600260009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610163573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610187919061038f565b6001600160a01b0316815260208101919091526040016000205460ff165b6101ae57600080fd5b565b6101b86102a7565b6101ae6000610306565b6101ca6102a7565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b031690565b6102086102a7565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6102316102a7565b6001600160a01b03811661029b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102a481610306565b50565b336102b06101f1565b6001600160a01b0316146101ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610292565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146102a457600080fd5b60006020828403121561037d57600080fd5b813561038881610356565b9392505050565b6000602082840312156103a157600080fd5b81516103888161035656fea2646970667358221220ddc98705f5b0de901b7a49a92e967cb67cb319a4c0c06989402eeee8f05b6d5b64736f6c63430008100033";

type AnotherRelayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnotherRelayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnotherRelay__factory extends ContractFactory {
  constructor(...args: AnotherRelayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AnotherRelay";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnotherRelay> {
    return super.deploy(overrides || {}) as Promise<AnotherRelay>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AnotherRelay {
    return super.attach(address) as AnotherRelay;
  }
  connect(signer: Signer): AnotherRelay__factory {
    return super.connect(signer) as AnotherRelay__factory;
  }
  static readonly contractName: "AnotherRelay";
  public readonly contractName: "AnotherRelay";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnotherRelayInterface {
    return new utils.Interface(_abi) as AnotherRelayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnotherRelay {
    return new Contract(address, _abi, signerOrProvider) as AnotherRelay;
  }
}
