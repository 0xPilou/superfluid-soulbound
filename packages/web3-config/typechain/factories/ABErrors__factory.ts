/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ABErrors, ABErrorsInterface } from "../ABErrors";

const _abi = [
  {
    inputs: [],
    name: "DropNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyDeposit",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectDeposit",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectInterface",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientMaxAmountPerAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientRoyalties",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientSupply",
    type: "error",
  },
  {
    inputs: [],
    name: "NothingToClaim",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedUpdate",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220f6632dd3a2c5114b5c50773ac79a0dff66c9d158bee0a8ebb28fd4640e67328964736f6c63430008100033";

type ABErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ABErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ABErrors__factory extends ContractFactory {
  constructor(...args: ABErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ABErrors";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ABErrors> {
    return super.deploy(overrides || {}) as Promise<ABErrors>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ABErrors {
    return super.attach(address) as ABErrors;
  }
  connect(signer: Signer): ABErrors__factory {
    return super.connect(signer) as ABErrors__factory;
  }
  static readonly contractName: "ABErrors";
  public readonly contractName: "ABErrors";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ABErrorsInterface {
    return new utils.Interface(_abi) as ABErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ABErrors {
    return new Contract(address, _abi, signerOrProvider) as ABErrors;
  }
}
