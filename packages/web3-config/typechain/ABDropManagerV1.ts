/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ABDropManagerV1 {
  export type TokenInfoStruct = {
    price: BigNumberish;
    supply: BigNumberish;
    royaltySharePerToken: BigNumberish;
  };

  export type TokenInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    price: BigNumber;
    supply: BigNumber;
    royaltySharePerToken: BigNumber;
  };

  export type SaleInfoStruct = {
    privateSaleMaxMint: BigNumberish;
    privateSaleTime: BigNumberish;
    publicSaleMaxMint: BigNumberish;
    publicSaleTime: BigNumberish;
  };

  export type SaleInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    privateSaleMaxMint: BigNumber;
    privateSaleTime: BigNumber;
    publicSaleMaxMint: BigNumber;
    publicSaleTime: BigNumber;
  };
}

export interface ABDropManagerV1Interface extends utils.Interface {
  contractName: "ABDropManagerV1";
  functions: {
    "create(address,address,address,uint256,uint256,uint256,uint256,uint256[4],bytes32)": FunctionFragment;
    "drops(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMerkleRoot(uint256,bytes32)": FunctionFragment;
    "setRightHolderInfo(uint256,uint256,address)": FunctionFragment;
    "setSalesInfo(uint256,uint256[4])": FunctionFragment;
    "setTokenInfo(uint256,uint256[3])": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "updateDropCounter(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "drops", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRightHolderInfo",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSalesInfo",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenInfo",
    values: [BigNumberish, [BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDropCounter",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drops", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRightHolderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSalesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDropCounter",
    data: BytesLike
  ): Result;

  events: {
    "DropCreated(uint256)": EventFragment;
    "DropUpdated(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DropCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DropUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type DropCreatedEvent = TypedEvent<[BigNumber], { dropId: BigNumber }>;

export type DropCreatedEventFilter = TypedEventFilter<DropCreatedEvent>;

export type DropUpdatedEvent = TypedEvent<[BigNumber], { dropId: BigNumber }>;

export type DropUpdatedEventFilter = TypedEventFilter<DropUpdatedEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ABDropManagerV1 extends BaseContract {
  contractName: "ABDropManagerV1";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ABDropManagerV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      _currencyPayout: string,
      _owner: string,
      _nft: string,
      _price: BigNumberish,
      _supply: BigNumberish,
      _royaltySharePerToken: BigNumberish,
      _rightHolderFee: BigNumberish,
      _salesInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _merkle: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "create(address,address,address,uint256,uint256,uint256,uint256,uint256[4],bytes32)"(
      _currencyPayout: string,
      _owner: string,
      _nft: string,
      _price: BigNumberish,
      _supply: BigNumberish,
      _royaltySharePerToken: BigNumberish,
      _rightHolderFee: BigNumberish,
      _salesInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _merkle: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drops(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ABDropManagerV1.TokenInfoStructOutput,
        ABDropManagerV1.SaleInfoStructOutput,
        string,
        string,
        string,
        string
      ] & {
        dropId: BigNumber;
        sold: BigNumber;
        rightHolderFee: BigNumber;
        firstTokenIndex: BigNumber;
        tokenInfo: ABDropManagerV1.TokenInfoStructOutput;
        salesInfo: ABDropManagerV1.SaleInfoStructOutput;
        currencyPayout: string;
        owner: string;
        nft: string;
        merkleRoot: string;
      }
    >;

    "drops(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ABDropManagerV1.TokenInfoStructOutput,
        ABDropManagerV1.SaleInfoStructOutput,
        string,
        string,
        string,
        string
      ] & {
        dropId: BigNumber;
        sold: BigNumber;
        rightHolderFee: BigNumber;
        firstTokenIndex: BigNumber;
        tokenInfo: ABDropManagerV1.TokenInfoStructOutput;
        salesInfo: ABDropManagerV1.SaleInfoStructOutput;
        currencyPayout: string;
        owner: string;
        nft: string;
        merkleRoot: string;
      }
    >;

    initialize(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      _dropId: BigNumberish,
      _merkle: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMerkleRoot(uint256,bytes32)"(
      _dropId: BigNumberish,
      _merkle: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRightHolderInfo(
      _dropId: BigNumberish,
      _rightHolderFee: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRightHolderInfo(uint256,uint256,address)"(
      _dropId: BigNumberish,
      _rightHolderFee: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSalesInfo(
      _dropId: BigNumberish,
      _saleInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSalesInfo(uint256,uint256[4])"(
      _dropId: BigNumberish,
      _saleInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenInfo(
      _dropId: BigNumberish,
      _tokenInfo: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTokenInfo(uint256,uint256[3])"(
      _dropId: BigNumberish,
      _tokenInfo: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTreasury(address)"(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    "treasury()"(overrides?: CallOverrides): Promise<[string]>;

    updateDropCounter(
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateDropCounter(uint256,uint256)"(
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  create(
    _currencyPayout: string,
    _owner: string,
    _nft: string,
    _price: BigNumberish,
    _supply: BigNumberish,
    _royaltySharePerToken: BigNumberish,
    _rightHolderFee: BigNumberish,
    _salesInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    _merkle: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "create(address,address,address,uint256,uint256,uint256,uint256,uint256[4],bytes32)"(
    _currencyPayout: string,
    _owner: string,
    _nft: string,
    _price: BigNumberish,
    _supply: BigNumberish,
    _royaltySharePerToken: BigNumberish,
    _rightHolderFee: BigNumberish,
    _salesInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    _merkle: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drops(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ABDropManagerV1.TokenInfoStructOutput,
      ABDropManagerV1.SaleInfoStructOutput,
      string,
      string,
      string,
      string
    ] & {
      dropId: BigNumber;
      sold: BigNumber;
      rightHolderFee: BigNumber;
      firstTokenIndex: BigNumber;
      tokenInfo: ABDropManagerV1.TokenInfoStructOutput;
      salesInfo: ABDropManagerV1.SaleInfoStructOutput;
      currencyPayout: string;
      owner: string;
      nft: string;
      merkleRoot: string;
    }
  >;

  "drops(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ABDropManagerV1.TokenInfoStructOutput,
      ABDropManagerV1.SaleInfoStructOutput,
      string,
      string,
      string,
      string
    ] & {
      dropId: BigNumber;
      sold: BigNumber;
      rightHolderFee: BigNumber;
      firstTokenIndex: BigNumber;
      tokenInfo: ABDropManagerV1.TokenInfoStructOutput;
      salesInfo: ABDropManagerV1.SaleInfoStructOutput;
      currencyPayout: string;
      owner: string;
      nft: string;
      merkleRoot: string;
    }
  >;

  initialize(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    _dropId: BigNumberish,
    _merkle: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMerkleRoot(uint256,bytes32)"(
    _dropId: BigNumberish,
    _merkle: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRightHolderInfo(
    _dropId: BigNumberish,
    _rightHolderFee: BigNumberish,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRightHolderInfo(uint256,uint256,address)"(
    _dropId: BigNumberish,
    _rightHolderFee: BigNumberish,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSalesInfo(
    _dropId: BigNumberish,
    _saleInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSalesInfo(uint256,uint256[4])"(
    _dropId: BigNumberish,
    _saleInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenInfo(
    _dropId: BigNumberish,
    _tokenInfo: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTokenInfo(uint256,uint256[3])"(
    _dropId: BigNumberish,
    _tokenInfo: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _newTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTreasury(address)"(
    _newTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  updateDropCounter(
    _dropId: BigNumberish,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateDropCounter(uint256,uint256)"(
    _dropId: BigNumberish,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    create(
      _currencyPayout: string,
      _owner: string,
      _nft: string,
      _price: BigNumberish,
      _supply: BigNumberish,
      _royaltySharePerToken: BigNumberish,
      _rightHolderFee: BigNumberish,
      _salesInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _merkle: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "create(address,address,address,uint256,uint256,uint256,uint256,uint256[4],bytes32)"(
      _currencyPayout: string,
      _owner: string,
      _nft: string,
      _price: BigNumberish,
      _supply: BigNumberish,
      _royaltySharePerToken: BigNumberish,
      _rightHolderFee: BigNumberish,
      _salesInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _merkle: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    drops(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ABDropManagerV1.TokenInfoStructOutput,
        ABDropManagerV1.SaleInfoStructOutput,
        string,
        string,
        string,
        string
      ] & {
        dropId: BigNumber;
        sold: BigNumber;
        rightHolderFee: BigNumber;
        firstTokenIndex: BigNumber;
        tokenInfo: ABDropManagerV1.TokenInfoStructOutput;
        salesInfo: ABDropManagerV1.SaleInfoStructOutput;
        currencyPayout: string;
        owner: string;
        nft: string;
        merkleRoot: string;
      }
    >;

    "drops(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ABDropManagerV1.TokenInfoStructOutput,
        ABDropManagerV1.SaleInfoStructOutput,
        string,
        string,
        string,
        string
      ] & {
        dropId: BigNumber;
        sold: BigNumber;
        rightHolderFee: BigNumber;
        firstTokenIndex: BigNumber;
        tokenInfo: ABDropManagerV1.TokenInfoStructOutput;
        salesInfo: ABDropManagerV1.SaleInfoStructOutput;
        currencyPayout: string;
        owner: string;
        nft: string;
        merkleRoot: string;
      }
    >;

    initialize(_treasury: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setMerkleRoot(
      _dropId: BigNumberish,
      _merkle: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMerkleRoot(uint256,bytes32)"(
      _dropId: BigNumberish,
      _merkle: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRightHolderInfo(
      _dropId: BigNumberish,
      _rightHolderFee: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRightHolderInfo(uint256,uint256,address)"(
      _dropId: BigNumberish,
      _rightHolderFee: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSalesInfo(
      _dropId: BigNumberish,
      _saleInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "setSalesInfo(uint256,uint256[4])"(
      _dropId: BigNumberish,
      _saleInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenInfo(
      _dropId: BigNumberish,
      _tokenInfo: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenInfo(uint256,uint256[3])"(
      _dropId: BigNumberish,
      _tokenInfo: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_newTreasury: string, overrides?: CallOverrides): Promise<void>;

    "setTreasury(address)"(
      _newTreasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;

    updateDropCounter(
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateDropCounter(uint256,uint256)"(
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DropCreated(uint256)"(dropId?: null): DropCreatedEventFilter;
    DropCreated(dropId?: null): DropCreatedEventFilter;

    "DropUpdated(uint256)"(dropId?: null): DropUpdatedEventFilter;
    DropUpdated(dropId?: null): DropUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    create(
      _currencyPayout: string,
      _owner: string,
      _nft: string,
      _price: BigNumberish,
      _supply: BigNumberish,
      _royaltySharePerToken: BigNumberish,
      _rightHolderFee: BigNumberish,
      _salesInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _merkle: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "create(address,address,address,uint256,uint256,uint256,uint256,uint256[4],bytes32)"(
      _currencyPayout: string,
      _owner: string,
      _nft: string,
      _price: BigNumberish,
      _supply: BigNumberish,
      _royaltySharePerToken: BigNumberish,
      _rightHolderFee: BigNumberish,
      _salesInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _merkle: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drops(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "drops(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMerkleRoot(
      _dropId: BigNumberish,
      _merkle: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMerkleRoot(uint256,bytes32)"(
      _dropId: BigNumberish,
      _merkle: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRightHolderInfo(
      _dropId: BigNumberish,
      _rightHolderFee: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRightHolderInfo(uint256,uint256,address)"(
      _dropId: BigNumberish,
      _rightHolderFee: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSalesInfo(
      _dropId: BigNumberish,
      _saleInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSalesInfo(uint256,uint256[4])"(
      _dropId: BigNumberish,
      _saleInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenInfo(
      _dropId: BigNumberish,
      _tokenInfo: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTokenInfo(uint256,uint256[3])"(
      _dropId: BigNumberish,
      _tokenInfo: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTreasury(address)"(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateDropCounter(
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateDropCounter(uint256,uint256)"(
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      _currencyPayout: string,
      _owner: string,
      _nft: string,
      _price: BigNumberish,
      _supply: BigNumberish,
      _royaltySharePerToken: BigNumberish,
      _rightHolderFee: BigNumberish,
      _salesInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _merkle: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "create(address,address,address,uint256,uint256,uint256,uint256,uint256[4],bytes32)"(
      _currencyPayout: string,
      _owner: string,
      _nft: string,
      _price: BigNumberish,
      _supply: BigNumberish,
      _royaltySharePerToken: BigNumberish,
      _rightHolderFee: BigNumberish,
      _salesInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _merkle: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drops(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "drops(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      _dropId: BigNumberish,
      _merkle: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMerkleRoot(uint256,bytes32)"(
      _dropId: BigNumberish,
      _merkle: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRightHolderInfo(
      _dropId: BigNumberish,
      _rightHolderFee: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRightHolderInfo(uint256,uint256,address)"(
      _dropId: BigNumberish,
      _rightHolderFee: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSalesInfo(
      _dropId: BigNumberish,
      _saleInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSalesInfo(uint256,uint256[4])"(
      _dropId: BigNumberish,
      _saleInfo: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenInfo(
      _dropId: BigNumberish,
      _tokenInfo: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenInfo(uint256,uint256[3])"(
      _dropId: BigNumberish,
      _tokenInfo: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTreasury(address)"(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateDropCounter(
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateDropCounter(uint256,uint256)"(
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
