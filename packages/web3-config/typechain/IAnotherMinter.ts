/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ABDropManager {
  export type PhaseStruct = {
    phaseStart: BigNumberish;
    maxMint: BigNumberish;
    merkle: BytesLike;
  };

  export type PhaseStructOutput = [BigNumber, BigNumber, string] & {
    phaseStart: BigNumber;
    maxMint: BigNumber;
    merkle: string;
  };
}

export interface IAnotherMinterInterface extends utils.Interface {
  contractName: "IAnotherMinter";
  functions: {
    "mint(address,uint256,uint256,bytes32[])": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setDropPhases(uint256,(uint256,uint256,bytes32)[])": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDropPhases",
    values: [BigNumberish, ABDropManager.PhaseStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDropPhases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAnotherMinter extends BaseContract {
  contractName: "IAnotherMinter";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAnotherMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mint(
      _to: string,
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      _proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(address,uint256,uint256,bytes32[])"(
      _to: string,
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      _proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBaseURI(string)"(
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDropPhases(
      _dropId: BigNumberish,
      _phases: ABDropManager.PhaseStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDropPhases(uint256,(uint256,uint256,bytes32)[])"(
      _dropId: BigNumberish,
      _phases: ABDropManager.PhaseStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  mint(
    _to: string,
    _dropId: BigNumberish,
    _quantity: BigNumberish,
    _proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(address,uint256,uint256,bytes32[])"(
    _to: string,
    _dropId: BigNumberish,
    _quantity: BigNumberish,
    _proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _newBaseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBaseURI(string)"(
    _newBaseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDropPhases(
    _dropId: BigNumberish,
    _phases: ABDropManager.PhaseStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDropPhases(uint256,(uint256,uint256,bytes32)[])"(
    _dropId: BigNumberish,
    _phases: ABDropManager.PhaseStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAll()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    mint(
      _to: string,
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256,uint256,bytes32[])"(
      _to: string,
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_newBaseURI: string, overrides?: CallOverrides): Promise<void>;

    "setBaseURI(string)"(
      _newBaseURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDropPhases(
      _dropId: BigNumberish,
      _phases: ABDropManager.PhaseStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setDropPhases(uint256,(uint256,uint256,bytes32)[])"(
      _dropId: BigNumberish,
      _phases: ABDropManager.PhaseStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    "withdrawAll()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    mint(
      _to: string,
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      _proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(address,uint256,uint256,bytes32[])"(
      _to: string,
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      _proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBaseURI(string)"(
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDropPhases(
      _dropId: BigNumberish,
      _phases: ABDropManager.PhaseStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDropPhases(uint256,(uint256,uint256,bytes32)[])"(
      _dropId: BigNumberish,
      _phases: ABDropManager.PhaseStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mint(
      _to: string,
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      _proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256,uint256,bytes32[])"(
      _to: string,
      _dropId: BigNumberish,
      _quantity: BigNumberish,
      _proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBaseURI(string)"(
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDropPhases(
      _dropId: BigNumberish,
      _phases: ABDropManager.PhaseStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDropPhases(uint256,(uint256,uint256,bytes32)[])"(
      _dropId: BigNumberish,
      _phases: ABDropManager.PhaseStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
