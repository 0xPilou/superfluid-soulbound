{
  "address": "0x22E9cd80fFbE5d05a093a07C3E7FBc40F83033C0",
  "abi": [
    {
      "inputs": [],
      "name": "DropNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectInterface",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientMaxAmountPerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientRoyalties",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedUpdate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        }
      ],
      "name": "DropCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        }
      ],
      "name": "DropUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currencyPayout",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_royaltySharePerToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rightHolderFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "_salesInfo",
          "type": "uint256[4]"
        },
        {
          "internalType": "bytes32",
          "name": "_merkle",
          "type": "bytes32"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "drops",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rightHolderFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstTokenIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "royaltySharePerToken",
              "type": "uint256"
            }
          ],
          "internalType": "struct ABDropManager.TokenInfo",
          "name": "tokenInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "privateSaleMaxMint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "privateSaleTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicSaleMaxMint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicSaleTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct ABDropManager.SaleInfo",
          "name": "salesInfo",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "currencyPayout",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dropId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_merkle",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dropId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rightHolderFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setRightHolderInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dropId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "_saleInfo",
          "type": "uint256[4]"
        }
      ],
      "name": "setSalesInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dropId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "_tokenInfo",
          "type": "uint256[3]"
        }
      ],
      "name": "setTokenInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dropId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "updateDropCounter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x28e69ebd54dc80803556ee6f885a97827603865578a84415d29c55d43e28189e",
  "receipt": {
    "to": null,
    "from": "0x301933aEf6bB308f090087e9075ed5bFcBd3e0B3",
    "contractAddress": "0x22E9cd80fFbE5d05a093a07C3E7FBc40F83033C0",
    "transactionIndex": 17,
    "gasUsed": "1066951",
    "logsBloom": "0x
    "blockHash": "0xb3f393e8502146907f1f9773bca2eaaf8ef78adc499467ba11f0fd00ecc6b7c3",
    "transactionHash": "0x28e69ebd54dc80803556ee6f885a97827603865578a84415d29c55d43e28189e",
    "logs": [],
    "blockNumber": 7756916,
    "cumulativeGasUsed": "11847892",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b5c07ad18efac07673a97a644b1f3a70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DropNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectInterface\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientMaxAmountPerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientRoyalties\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedUpdate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"DropCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"}],\"name\":\"DropUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyPayout\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltySharePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rightHolderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"_salesInfo\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes32\",\"name\":\"_merkle\",\"type\":\"bytes32\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"drops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightHolderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTokenIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltySharePerToken\",\"type\":\"uint256\"}],\"internalType\":\"struct ABDropManager.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"privateSaleMaxMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateSaleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleMaxMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleTime\",\"type\":\"uint256\"}],\"internalType\":\"struct ABDropManager.SaleInfo\",\"name\":\"salesInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"currencyPayout\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkle\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rightHolderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setRightHolderInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"_saleInfo\",\"type\":\"uint256[4]\"}],\"name\":\"setSalesInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"_tokenInfo\",\"type\":\"uint256[3]\"}],\"name\":\"setTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"updateDropCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(address,address,address,uint256,uint256,uint256,uint256,uint256[4],bytes32)\":{\"params\":{\"_currencyPayout\":\": address of the currency used for the royalty payout (zero-address if ETH)\",\"_merkle\":\": merkle tree root used for whitelist\",\"_nft\":\": NFT contract address\",\"_owner\":\": right holder address\",\"_price\":\": initial price in ETH of 1 NFT\",\"_rightHolderFee\":\": right Holder fee on each mint (to be divided by 1e6)\",\"_royaltySharePerToken\":\": total percentage of royalty evenly distributed among NFT holders (to be divided by 1e6)\",\"_salesInfo\":\": Array of Timestamps at which the private and public sales are opened\",\"_supply\":\": total number of NFT for this drop\"}},\"initialize(address)\":{\"params\":{\"_treasury\":\": treasury address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMerkleRoot(uint256,bytes32)\":{\"params\":{\"_dropId\":\":  drop identifier of the drop to be updated\",\"_merkle\":\": the new merkle root to be set\"}},\"setRightHolderInfo(uint256,uint256,address)\":{\"params\":{\"_dropId\":\":  drop identifier of the drop to be updated\",\"_owner\":\": right holder address\",\"_rightHolderFee\":\": fees paid to right holder\"}},\"setSalesInfo(uint256,uint256[4])\":{\"params\":{\"_dropId\":\":  drop identifier of the drop to be updated\",\"_saleInfo\":\": array containing the new information to be updated\"}},\"setTokenInfo(uint256,uint256[3])\":{\"params\":{\"_dropId\":\":  drop identifier of the drop to be updated\",\"_tokenInfo\":\": array containing the new informations to be updated\"}},\"setTreasury(address)\":{\"params\":{\"_newTreasury\":\": new treasury address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateDropCounter(uint256,uint256)\":{\"params\":{\"_dropId\":\": drop identifier\",\"_quantity\":\": quantity of NFT sold\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"DropNotFound()\":[{\"notice\":\"Error returned if attempting to deposit reward for an inexistant drop*\"}],\"EmptyDeposit()\":[{\"notice\":\"Error returned if the amount deposited is equal to 0*\"}],\"IncorrectDeposit()\":[{\"notice\":\"Error returned if the sum of the _amounts in deposit is different than the ETH sent*\"}],\"IncorrectInterface()\":[{\"notice\":\"Error returned if the contract passed as parameters does not implement the expected interface*\"}],\"InsufficientMaxAmountPerAddress()\":[{\"notice\":\"Error returned if `maxAmountPerAddress` is smaller or equal to 0*\"}],\"InsufficientRoyalties()\":[{\"notice\":\"Error returned if `royaltySharePerToken` is smaller or equal to 0*\"}],\"InsufficientSupply()\":[{\"notice\":\"Error returned if `supply` is smaller or equal to 0*\"}],\"NothingToClaim()\":[{\"notice\":\"Error returned if there is nothing to claim*\"}],\"UnauthorizedUpdate()\":[{\"notice\":\"Error returned if an unauthorized address attempt to update the drop details*\"}],\"ZeroAddress()\":[{\"notice\":\"Error returned if `owner` address is the zero address*\"}]},\"kind\":\"user\",\"methods\":{\"create(address,address,address,uint256,uint256,uint256,uint256,uint256[4],bytes32)\":{\"notice\":\"Create a Drop  Only the contract owner can perform this operation\"},\"initialize(address)\":{\"notice\":\"Contract Initializer\"},\"setMerkleRoot(uint256,bytes32)\":{\"notice\":\"Update the merkle root (for allowlist) for the Drop `_dropId`  Only the contract owner can perform this operation\"},\"setRightHolderInfo(uint256,uint256,address)\":{\"notice\":\"Update the Drop `_dropId` drop information  Only the contract owner can perform this operation\"},\"setSalesInfo(uint256,uint256[4])\":{\"notice\":\"Update the Drop `_dropId` sale information  Only the contract owner can perform this operation\"},\"setTokenInfo(uint256,uint256[3])\":{\"notice\":\"Update the Drop `_dropId` token information  Only the contract owner can perform this operation  Return true if `tokenCount` and `supply` are updated, false otherwise\"},\"setTreasury(address)\":{\"notice\":\"Update the treasury address  Only the contract owner can perform this operation\"},\"updateDropCounter(uint256,uint256)\":{\"notice\":\"Update the Drop `_dropId` with new `_quantity` recently sold\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ABDropManager.sol\":\"ABDropManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc65c83c1039508fa7a42a09a3c6a32babd1c438ba4dbb23581255e784b5d5eed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ABDropManager.sol\":{\"content\":\"//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                                                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                                                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                                                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                                                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//\\n//\\n//  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551 \\u2588\\u2588\\u2554\\u255d\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2554\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551 \\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n//\\n/**\\n * @title ABDropManager\\n * @author Anotherblock Technical Team\\n * @notice This contract is responsible for creating and administrating new drops related to anotherblock.io\\n **/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport './interfaces/IABDropManager.sol';\\nimport './interfaces/IERC721AB.sol';\\nimport './ABErrors.sol';\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165Checker.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165Storage.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\ncontract ABDropManager is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ABErrors,\\n    ERC165Storage\\n{\\n    // Array of existing Drops\\n    Drop[] public drops;\\n\\n    // Address of anotherblock multisig\\n    address public treasury;\\n\\n    // Drop count since genesis\\n    uint256 private totalDrop;\\n\\n    // Event emitted upon Drop creation\\n    event DropCreated(uint256 dropId);\\n\\n    // Event emitted upon Drop update\\n    event DropUpdated(uint256 dropId);\\n\\n    /**\\n     * @notice\\n     *  Drop Structure format\\n     *\\n     * @param dropId : drop unique identifier\\n     * @param sold : total number of sold tokens for this drop\\n     * @param rightHolderFee : right Holder fee on each mint (to be divided by 1e6)\\n     * @param firstTokenIndex : TokenId at which this drop starts\\n     * @param salesInfo : Sale Info struct defining the private and public sales opening date (see SaleInfo structure)\\n     * @param tokenInfo : Token Info struct defining the token information (see TokenInfo structure)\\n     * @param currencyPayout : address of the currency used for the royalty payout (zero-address if ETH)\\n     * @param owner : right holder address\\n     * @param nft :  NFT contract address\\n     * @param merkleRoot : merkle tree root used for allowlist\\n     */\\n    struct Drop {\\n        uint256 dropId;\\n        uint256 sold;\\n        uint256 rightHolderFee;\\n        uint256 firstTokenIndex;\\n        TokenInfo tokenInfo;\\n        SaleInfo salesInfo;\\n        address currencyPayout;\\n        address owner;\\n        address nft;\\n        bytes32 merkleRoot;\\n    }\\n\\n    /**\\n     * @notice\\n     *  TokenInfo Structure format\\n     *\\n     * @param price : initial price in ETH of 1 token\\n     * @param supply : total number of tokens for this drop\\n     * @param royaltySharePerToken : total percentage of royalty evenly distributed among tokens holders (to be divided by 1e6)\\n     */\\n    struct TokenInfo {\\n        uint256 price;\\n        uint256 supply;\\n        uint256 royaltySharePerToken;\\n    }\\n\\n    /**\\n     * @notice\\n     *  SaleInfo Structure format\\n     *\\n     * @param privateSaleMaxMint : maximum number of token to be minted per address for the private sale\\n     * @param privateSaleTime : timestamp at which the private sale is opened\\n     * @param publicSaleMaxMint : maximum number of token to be minted per address for the public sale\\n     * @param publicSaleTime : timestamp at which the public sale is opened\\n     */\\n    struct SaleInfo {\\n        uint256 privateSaleMaxMint;\\n        uint256 privateSaleTime;\\n        uint256 publicSaleMaxMint;\\n        uint256 publicSaleTime;\\n    }\\n\\n    /**\\n     * Contract Initializer\\n     *\\n     * @param _treasury : treasury address\\n     */\\n    function initialize(address _treasury) public initializer {\\n        // Check that the treasury address is not the zero-address\\n        if (_treasury == address(0)) revert ZeroAddress();\\n        treasury = _treasury;\\n        totalDrop = 0;\\n        // Register ABDropManager interface\\n        _registerInterface(type(IABDropManager).interfaceId);\\n        __Ownable_init();\\n    }\\n\\n    //     ______     __                        __   ______                 __  _\\n    //    / ____/  __/ /____  _________  ____ _/ /  / ____/_  ______  _____/ /_(_)___  ____  _____\\n    //   / __/ | |/_/ __/ _ \\\\/ ___/ __ \\\\/ __ `/ /  / /_  / / / / __ \\\\/ ___/ __/ / __ \\\\/ __ \\\\/ ___/\\n    //  / /____>  </ /_/  __/ /  / / / / /_/ / /  / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )\\n    // /_____/_/|_|\\\\__/\\\\___/_/  /_/ /_/\\\\__,_/_/  /_/    \\\\__,_/_/ /_/\\\\___/\\\\__/_/\\\\____/_/ /_/____/\\n\\n    /**\\n     * @notice\\n     *  Update the Drop `_dropId` with new `_quantity` recently sold\\n     *\\n     * @param _dropId : drop identifier\\n     * @param _quantity : quantity of NFT sold\\n     */\\n    function updateDropCounter(uint256 _dropId, uint256 _quantity) external {\\n        Drop storage drop = drops[_dropId];\\n\\n        // Ensure that the caller is the NFT contract associated to this drop\\n        if (msg.sender != drop.nft) revert UnauthorizedUpdate();\\n\\n        // Increment the sold quantity\\n        drop.sold += _quantity;\\n    }\\n\\n    //\\n    //     ____        __         ____                              ______                 __  _\\n    //    / __ \\\\____  / /_  __   / __ \\\\_      ______  ___  _____   / ____/_  ______  _____/ /_(_)___  ____  _____\\n    //   / / / / __ \\\\/ / / / /  / / / / | /| / / __ \\\\/ _ \\\\/ ___/  / /_  / / / / __ \\\\/ ___/ __/ / __ \\\\/ __ \\\\/ ___/\\n    //  / /_/ / / / / / /_/ /  / /_/ /| |/ |/ / / / /  __/ /     / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )\\n    //  \\\\____/_/ /_/_/\\\\__, /   \\\\____/ |__/|__/_/ /_/\\\\___/_/     /_/    \\\\__,_/_/ /_/\\\\___/\\\\__/_/\\\\____/_/ /_/____/\\n    //               /____/\\n\\n    /**\\n     * @notice\\n     *  Create a Drop\\n     *  Only the contract owner can perform this operation\\n     *\\n     * @param _currencyPayout : address of the currency used for the royalty payout (zero-address if ETH)\\n     * @param _owner : right holder address\\n     * @param _nft : NFT contract address\\n     * @param _price : initial price in ETH of 1 NFT\\n     * @param _supply : total number of NFT for this drop\\n     * @param _royaltySharePerToken : total percentage of royalty evenly distributed among NFT holders (to be divided by 1e6)\\n     * @param _rightHolderFee : right Holder fee on each mint (to be divided by 1e6)\\n     * @param _salesInfo : Array of Timestamps at which the private and public sales are opened\\n     * @param _merkle : merkle tree root used for whitelist\\n     */\\n    function create(\\n        address _currencyPayout,\\n        address _owner,\\n        address _nft,\\n        uint256 _price,\\n        uint256 _supply,\\n        uint256 _royaltySharePerToken,\\n        uint256 _rightHolderFee,\\n        uint256[4] calldata _salesInfo,\\n        bytes32 _merkle\\n    ) external onlyOwner {\\n        // Enforce non-null royalty shares for this drop\\n        if (_royaltySharePerToken <= 0) revert InsufficientRoyalties();\\n\\n        // Enforce non-null maximum amount per address\\n        if (_salesInfo[0] <= 0 || _salesInfo[2] <= 0)\\n            revert InsufficientMaxAmountPerAddress();\\n\\n        // Enforce non-null supply\\n        if (_supply <= 0) revert InsufficientSupply();\\n\\n        // Ensure right holder address is not the zero address\\n        if (_owner == address(0)) revert ZeroAddress();\\n\\n        // Ensure NFT address is of type ERC721AB\\n        if (!ERC165Checker.supportsInterface(_nft, type(IERC721AB).interfaceId))\\n            revert IncorrectInterface();\\n\\n        // Create the drop\\n        _createDrop(\\n            _currencyPayout,\\n            _owner,\\n            _nft,\\n            _rightHolderFee,\\n            TokenInfo(_price, _supply, _royaltySharePerToken),\\n            SaleInfo(\\n                _salesInfo[0],\\n                _salesInfo[1],\\n                _salesInfo[2],\\n                _salesInfo[3]\\n            ),\\n            _merkle\\n        );\\n    }\\n\\n    /**\\n     * @notice\\n     *  Update the treasury address\\n     *  Only the contract owner can perform this operation\\n     *\\n     * @param _newTreasury : new treasury address\\n     */\\n    function setTreasury(address _newTreasury) external onlyOwner {\\n        if (_newTreasury == address(0)) revert ZeroAddress();\\n        treasury = _newTreasury;\\n    }\\n\\n    /**\\n     * @notice\\n     *  Update the Drop `_dropId` sale information\\n     *  Only the contract owner can perform this operation\\n     *\\n     * @param _dropId :  drop identifier of the drop to be updated\\n     * @param _saleInfo : array containing the new information to be updated\\n     */\\n    function setSalesInfo(uint256 _dropId, uint256[4] calldata _saleInfo)\\n        external\\n        onlyOwner\\n    {\\n        // Enfore non-null maximum amount per address\\n        if (_saleInfo[0] <= 0 || _saleInfo[2] <= 0)\\n            revert InsufficientMaxAmountPerAddress();\\n\\n        Drop storage drop = drops[_dropId];\\n        drop.salesInfo.privateSaleMaxMint = _saleInfo[0];\\n        drop.salesInfo.privateSaleTime = _saleInfo[1];\\n        drop.salesInfo.publicSaleMaxMint = _saleInfo[2];\\n        drop.salesInfo.publicSaleTime = _saleInfo[3];\\n\\n        // Emit Drop Update event\\n        emit DropUpdated(_dropId);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Update the merkle root (for allowlist) for the Drop `_dropId`\\n     *  Only the contract owner can perform this operation\\n     *\\n     * @param _dropId :  drop identifier of the drop to be updated\\n     * @param _merkle : the new merkle root to be set\\n     */\\n    function setMerkleRoot(uint256 _dropId, bytes32 _merkle)\\n        external\\n        onlyOwner\\n    {\\n        Drop storage drop = drops[_dropId];\\n        drop.merkleRoot = _merkle;\\n\\n        // Emit Drop Update event\\n        emit DropUpdated(_dropId);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Update the Drop `_dropId` token information\\n     *  Only the contract owner can perform this operation\\n     *\\n     *  Return true if `tokenCount` and `supply` are updated, false otherwise\\n     *\\n     * @param _dropId :  drop identifier of the drop to be updated\\n     * @param _tokenInfo : array containing the new informations to be updated\\n     */\\n    function setTokenInfo(uint256 _dropId, uint256[3] calldata _tokenInfo)\\n        external\\n        onlyOwner\\n    {\\n        // Ensure supply non-null\\n        if (_tokenInfo[1] <= 0) revert InsufficientSupply();\\n\\n        // Enfore non-null royalty shares for this drop\\n        if (_tokenInfo[2] <= 0) revert InsufficientRoyalties();\\n\\n        // Get the drop to be updated\\n        Drop storage drop = drops[_dropId];\\n\\n        // Update the price info\\n        drop.tokenInfo.price = _tokenInfo[0];\\n\\n        // Update the royalty share info\\n        drop.tokenInfo.royaltySharePerToken = _tokenInfo[2];\\n\\n        // Check if the Drop has never been minted and if it is the last drop created\\n        if (drop.sold == 0 && _dropId == drops[drops.length - 1].dropId) {\\n            // Update the supply info\\n            drop.tokenInfo.supply = _tokenInfo[1];\\n        }\\n        // Emit Drop Update event\\n        emit DropUpdated(_dropId);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Update the Drop `_dropId` drop information\\n     *  Only the contract owner can perform this operation\\n     *\\n     * @param _dropId :  drop identifier of the drop to be updated\\n     * @param _rightHolderFee : fees paid to right holder\\n     * @param _owner : right holder address\\n     */\\n    function setRightHolderInfo(\\n        uint256 _dropId,\\n        uint256 _rightHolderFee,\\n        address _owner\\n    ) external onlyOwner {\\n        // Ensure right holder address is not the zero address\\n        if (_owner == address(0)) revert ZeroAddress();\\n\\n        Drop storage drop = drops[_dropId];\\n        drop.rightHolderFee = _rightHolderFee;\\n        drop.owner = _owner;\\n\\n        // Emit Drop Update event\\n        emit DropUpdated(_dropId);\\n    }\\n\\n    //     ____      __                        __   ______                 __  _\\n    //    /  _/___  / /____  _________  ____ _/ /  / ____/_  ______  _____/ /_(_)___  ____  _____\\n    //    / // __ \\\\/ __/ _ \\\\/ ___/ __ \\\\/ __ `/ /  / /_  / / / / __ \\\\/ ___/ __/ / __ \\\\/ __ \\\\/ ___/\\n    //  _/ // / / / /_/  __/ /  / / / / /_/ / /  / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )\\n    // /___/_/ /_/\\\\__/\\\\___/_/  /_/ /_/\\\\__,_/_/  /_/    \\\\__,_/_/ /_/\\\\___/\\\\__/_/\\\\____/_/ /_/____/\\n\\n    /**\\n     * @notice\\n     *  Register the Drop information\\n     *\\n     * @param _currencyPayout : address of the currency used for the royalty payout (zero-address if ETH)\\n     * @param _owner : right holder address\\n     * @param _nft : NFT contract address\\n     * @param _rightHolderFee : right Holder fee on each mint expressed\\n     * @param _tokenInfo : token information structure (see TokenInfo struct details)\\n     * @param _salesInfo : Array of Timestamps at which the private and public sales are opened (see SaleInfo Struct details)\\n     * @param _merkle : merkle tree used for whitelist\\n     */\\n    function _createDrop(\\n        address _currencyPayout,\\n        address _owner,\\n        address _nft,\\n        uint256 _rightHolderFee,\\n        TokenInfo memory _tokenInfo,\\n        SaleInfo memory _salesInfo,\\n        bytes32 _merkle\\n    ) internal {\\n        uint256 startTokenIndex;\\n        if (totalDrop > 0) {\\n            startTokenIndex =\\n                drops[totalDrop - 1].firstTokenIndex +\\n                drops[totalDrop - 1].tokenInfo.supply;\\n        } else {\\n            startTokenIndex = 0;\\n        }\\n        drops.push(\\n            Drop(\\n                totalDrop,\\n                0,\\n                _rightHolderFee,\\n                startTokenIndex,\\n                _tokenInfo,\\n                _salesInfo,\\n                _currencyPayout,\\n                _owner,\\n                _nft,\\n                _merkle\\n            )\\n        );\\n        // Emit Drop Creation event\\n        emit DropCreated(totalDrop);\\n\\n        // Increment the total drop count\\n        totalDrop++;\\n    }\\n}\\n\",\"keccak256\":\"0xfcfeac5876d1fefac6d99c8a2ce891a79fb75ed377bd1ed848134d53da7e5d9f\",\"license\":\"MIT\"},\"contracts/ABErrors.sol\":{\"content\":\"//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                                                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                                                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                                                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                                                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//\\n//\\n//  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551 \\u2588\\u2588\\u2554\\u255d\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2554\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551 \\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n//\\n/**\\n * @title ABErrors\\n * @author Anotherblock Technical Team\\n * @notice AnotherblockV1 Custom Errors contract\\n **/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract ABErrors {\\n    /**\\n    @notice Error returned if `royaltySharePerToken` is smaller or equal to 0\\n    **/\\n    error InsufficientRoyalties();\\n\\n    /**\\n    @notice Error returned if `maxAmountPerAddress` is smaller or equal to 0\\n    **/\\n    error InsufficientMaxAmountPerAddress();\\n\\n    /**\\n    @notice Error returned if `supply` is smaller or equal to 0\\n    **/\\n    error InsufficientSupply();\\n\\n    /**\\n    @notice Error returned if `owner` address is the zero address\\n    **/\\n    error ZeroAddress();\\n\\n    /**\\n    @notice Error returned if the amount deposited is equal to 0\\n    **/\\n    error EmptyDeposit();\\n\\n    /**\\n    @notice Error returned if attempting to deposit reward for an inexistant drop\\n    **/\\n    error DropNotFound();\\n\\n    /**\\n    @notice Error returned if the sum of the _amounts in deposit is different than the ETH sent\\n    **/\\n    error IncorrectDeposit();\\n\\n    /**\\n    @notice Error returned if there is nothing to claim\\n    **/\\n    error NothingToClaim();\\n\\n    /**\\n    @notice Error returned if an unauthorized address attempt to update the drop details\\n    **/\\n    error UnauthorizedUpdate();\\n\\n    /**\\n    @notice Error returned if the contract passed as parameters does not implement the expected interface\\n    **/\\n    error IncorrectInterface();\\n}\",\"keccak256\":\"0xdf352a5379c1d232e82a148f0dc4c9548caa6274a2479062304d8fd24cc3fa84\",\"license\":\"MIT\"},\"contracts/interfaces/IABDropManager.sol\":{\"content\":\"//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588    \\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588        \\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588        \\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588        \\n//                            \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588          \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588        \\n//                                                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 \\n//                                                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 \\n//                                                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588            \\n//                                                    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\n//\\n//\\n//  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557      \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551 \\u2588\\u2588\\u2554\\u255d\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2554\\u2550\\u2588\\u2588\\u2557 \\n// \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551 \\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d                                                                                             \\n//\\n/**\\n * @title IABDropManager\\n * @author Anotherblock Technical Team\\n * @notice ABDropManager Interface\\n **/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IABDropManager {\\n    /**\\n     * @notice\\n     *  Drop Structure format\\n     *\\n     * @param dropId : drop unique identifier\\n     * @param sold : total number of sold tokens for this drop (accross all associated tokenId)\\n     * @param rightHolderFee : right Holder fee on each mint expressed in basis point\\n     * @param firstTokenIndex : TokenId at which this drop starts\\n     * @param salesInfo : Sale Info struct defining the private and public sales opening date\\n     * @param tokenInfo : Token Info struct defining the token information (see TokenInfo structure)\\n     * @param currencyPayout : address of the currency used for the royalty payout (zero-address if ETH)\\n     * @param owner : right holder address\\n     * @param nft :  NFT contract address\\n     * @param merkleRoot : merkle tree root used for whitelist\\n     */\\n    struct Drop {\\n        uint256 dropId;\\n        uint256 sold;\\n        uint256 rightHolderFee;\\n        uint256 firstTokenIndex;\\n        TokenInfo tokenInfo;\\n        SaleInfo salesInfo;\\n        address currencyPayout;\\n        address owner;\\n        address nft;\\n        bytes32 merkleRoot;\\n    }\\n\\n    /**\\n     * @notice\\n     *  TokenInfo Structure format\\n     *\\n     * @param price : initial price in ETH(?) of 1 token\\n     * @param supply : total number of tokens for this drop (accross all associated tokenId)\\n     * @param royaltySharePerToken : total percentage of royalty evenly distributed among tokens holders\\n     */\\n    struct TokenInfo {\\n        uint256 price;\\n        uint256 supply;\\n        uint256 royaltySharePerToken;\\n    }\\n\\n    /**\\n     * @notice\\n     *  SaleInfo Structure format\\n     *\\n     * @param privateSaleMaxMint : Maximum number of token to be minted per address for the private sale\\n     * @param privateSaleTime : timestamp at which the private sale is opened\\n     * @param publicSaleMaxMint : Maximum number of token to be minted per address for the public sale\\n     * @param publicSaleTime : timestamp at which the public sale is opened\\n     */\\n    struct SaleInfo {\\n        uint256 privateSaleMaxMint;\\n        uint256 privateSaleTime;\\n        uint256 publicSaleMaxMint;\\n        uint256 publicSaleTime;\\n    }\\n\\n    /**\\n     * @notice\\n     *  Returns Anotherblock Treasury address\\n     *\\n     */\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @notice\\n     *  Returns the drop `_dropId`\\n     *\\n     * @param _dropId : drop identifier\\n     */\\n    function drops(uint256 _dropId) external view returns (Drop memory);\\n\\n    /**\\n     * @notice\\n     *  Create a Drop\\n     *\\n     * @param _owner : right holder address\\n     * @param _nft : NFT contract address\\n     * @param _price : initial price in ETH(?) of 1 NFT\\n     * @param _supply : total number of NFT for this drop (accross all associated tokenId)\\n     * @param _royaltySharePerToken : total percentage of royalty evenly distributed among NFT holders\\n     * @param _rightHolderFee : right Holder fee on each mint expressed in basis point\\n     * @param _maxAmountPerAddress : Maximum number of token to be minted per address\\n     * @param _salesInfo : Array of Timestamps at which the private and public sales are opened (in seconds)\\n     * @param _merkle : merkle tree root used for whitelist\\n     */\\n    function create(\\n        address _owner,\\n        address _nft,\\n        uint256 _price,\\n        uint256 _supply,\\n        uint256 _royaltySharePerToken,\\n        uint256 _rightHolderFee,\\n        uint256 _maxAmountPerAddress,\\n        uint256[2] calldata _salesInfo,\\n        bytes32 _merkle\\n    ) external;\\n\\n    function updateDropCounter(uint256 _dropId, uint256 _quantity) external;\\n\\n    /**\\n     * @notice\\n     *  Update the treasury address\\n     *  Only the contract owner can perform this operation\\n     *\\n     * @param _newTreasury : new treasury address\\n     */\\n    function setTreasury(address _newTreasury) external;\\n\\n    /**\\n     * @notice\\n     *  Update the Drop `_dropId` sale information\\n     *  Only the contract owner can perform this operation\\n     *\\n     * @param _dropId :  drop identifier of the drop to be updated\\n     * @param _saleInfo : array containing the new informations to be updated\\n     */\\n    function setSalesInfo(uint256 _dropId, uint256[4] calldata _saleInfo)\\n        external;\\n\\n    /**\\n     * @notice\\n     *  Update the Drop `_dropId` drop information\\n     *  Only the contract owner can perform this operation\\n     *\\n     * @param _dropId :  drop identifier of the drop to be updated\\n     * @param _rightHolderFee : fees paid to right holder\\n     * @param _owner : right holder address\\n     */\\n    function setRightHolderInfo(\\n        uint256 _dropId,\\n        uint256 _rightHolderFee,\\n        address _owner\\n    ) external;\\n\\n    /**\\n     * @notice\\n     *  Update the Drop `_dropId` token information\\n     *  Only the contract owner can perform this operation\\n     *\\n     *  Return true if `tokenCount` and `supply` are updated, false otherwise\\n     *\\n     * @param _dropId :  drop identifier of the drop to be updated\\n     * @param _tokenInfo : array containing the new informations to be updated\\n     */\\n    function setTokenInfo(uint256 _dropId, uint256[3] calldata _tokenInfo)\\n        external\\n        returns (bool);\\n}\",\"keccak256\":\"0x5d04ce5b83ebc05a7f674d58955a9b7f6cd0f9cdb8b83726b817adeb435de22d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721AB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC721AB {\\n    /**\\n     * @notice\\n     *  Update anotherblock address\\n     *  Revoke the AB_ROLE from the previous anotherblock address\\n     *  Grant the AB_ROLE role to the new address\\n     *  Only DEFAULT_ADMIN_ROLE can perform this operation\\n     *\\n     * @param _anotherblock : new anotherblock address\\n     */\\n    function setAnotherblock(address _anotherblock) external;\\n\\n    /**\\n     * @notice\\n     *  Return an array containing the token IDs owned by the given address\\n     *\\n     * @param _owner : owner address\\n     * @return result : array containing all the token IDs owned by `_owner`\\n     */\\n    function tokensOfOwner(address _owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function dropIdPerToken(uint256 _tokenId) external returns (uint256);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdaed053b1f5108cdee80879008b85ace33be9a7081ae47cd3003c8f4299fdca9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611257806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ba5760003560e01c806301981029146100bf57806301ffc9a7146100d457806305395b6f146100fc57806318712c211461010f578063595777cd146101225780635eb399681461013557806361d027b31461015e578063715018a6146101895780638da5cb5b14610191578063a113438c14610199578063aa40cbd8146101ac578063c4d66de8146101bf578063f0f44260146101d2578063f2fde38b146101e5575b600080fd5b6100d26100cd366004610ee6565b6101f8565b005b6100e76100e2366004610f13565b6102a3565b60405190151581526020015b60405180910390f35b6100d261010a366004610f3d565b6102e3565b6100d261011d366004610f70565b6103de565b6100d2610130366004610fae565b610433565b610148610143366004611034565b6105af565b6040516100f39a9998979695949392919061105a565b606754610171906001600160a01b031681565b6040516001600160a01b0390911681526020016100f3565b6100d261066e565b610171610682565b6100d26101a7366004610f70565b610691565b6100d26101ba3660046110fb565b610704565b6100d26101cd366004611130565b6107a5565b6100d26101e0366004611130565b610913565b6100d26101f3366004611130565b610964565b6102006109dd565b8035158061021057506040810135155b1561022e576040516374235bdf60e11b815260040160405180910390fd5b6000606683815481106102435761024361114b565b600091825260209182902084356007600f939093029091019182015583820135600882015560408085013560098301556060850135600a8301555185815290925060008051602061120283398151915291015b60405180910390a1505050565b60006301ffc9a760e01b6001600160e01b0319831614806102dd57506001600160e01b0319821660009081526065602052604090205460ff165b92915050565b6102eb6109dd565b602081013561030d57604051630cea840760e21b815260040160405180910390fd5b604081013561032f5760405163a844960960e01b815260040160405180910390fd5b6000606683815481106103445761034461114b565b600091825260208220600f9091020191508290602002013560048201558160026020020135600682015560018101541580156103b057506066805461038b90600190611177565b8154811061039b5761039b61114b565b90600052602060002090600f02016000015483145b156103c057602082013560058201555b60405183815260008051602061120283398151915290602001610296565b6103e66109dd565b6000606683815481106103fb576103fb61114b565b90600052602060002090600f020190508181600e01819055506000805160206112028339815191528360405161029691815260200190565b61043b6109dd565b6000841161045c5760405163a844960960e01b815260040160405180910390fd5b8135158061046c57506040820135155b1561048a576040516374235bdf60e11b815260040160405180910390fd5b600085116104ab57604051630cea840760e21b815260040160405180910390fd5b6001600160a01b0388166104d25760405163d92e233d60e01b815260040160405180910390fd5b6104e3876352a88fdd60e01b610a3c565b61050057604051630b7d5ce760e11b815260040160405180910390fd5b6105a48989898660405180606001604052808c81526020018b81526020018a8152506040518060800160405280896000600481106105405761054061114b565b602002013581526020018960016004811061055d5761055d61114b565b602002013581526020018960026004811061057a5761057a61114b565b60200201358152602001896003600481106105975761059761114b565b6020020135905287610a5f565b505050505050505050565b606681815481106105bf57600080fd5b6000918252602091829020600f9091020180546001820154600283015460038401546040805160608082018352600488015482526005880154828a0152600688015482840152825160808101845260078901548152600889015499810199909952600988015492890192909252600a87015491880191909152600b860154600c870154600d880154600e9098015496995094979396929591946001600160a01b0391821693908216929116908a565b6106766109dd565b6106806000610cea565b565b6033546001600160a01b031690565b6000606683815481106106a6576106a661114b565b60009182526020909120600f90910201600d8101549091506001600160a01b031633146106e657604051634f1f214760e01b815260040160405180910390fd5b818160010160008282546106fa919061118a565b9091555050505050565b61070c6109dd565b6001600160a01b0381166107335760405163d92e233d60e01b815260040160405180910390fd5b6000606684815481106107485761074861114b565b6000918252602091829020600f9091020160028101859055600c810180546001600160a01b0319166001600160a01b038616179055604051868152909250600080516020611202833981519152910160405180910390a150505050565b600054610100900460ff16158080156107c55750600054600160ff909116105b806107df5750303b1580156107df575060005460ff166001145b6108475760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561086a576000805461ff0019166101001790555b6001600160a01b0382166108915760405163d92e233d60e01b815260040160405180910390fd5b606780546001600160a01b0319166001600160a01b03841617905560006068556108c163c35b377960e01b610d3c565b6108c9610dba565b801561090f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b61091b6109dd565b6001600160a01b0381166109425760405163d92e233d60e01b815260040160405180910390fd5b606780546001600160a01b0319166001600160a01b0392909216919091179055565b61096c6109dd565b6001600160a01b0381166109d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161083e565b6109da81610cea565b50565b336109e6610682565b6001600160a01b0316146106805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161083e565b6000610a4783610de9565b8015610a585750610a588383610e1c565b9392505050565b60685460009015610ae45760666001606854610a7b9190611177565b81548110610a8b57610a8b61114b565b90600052602060002090600f02016004016001015460666001606854610ab19190611177565b81548110610ac157610ac161114b565b90600052602060002090600f020160030154610add919061118a565b9050610ae8565b5060005b60666040518061014001604052806068548152602001600081526020018781526020018381526020018681526020018581526020018a6001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b031681526020018481525090806001815401808255809150506001900390600052602060002090600f020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401600082015181600001556020820151816001015560408201518160020155505060a08201518160070160008201518160000155602082015181600101556040820151816002015560608201518160030155505060c082015181600b0160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e082015181600c0160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061010082015181600d0160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061012082015181600e015550507f01a6d33d95d2560a8c53f00317beb1d0364b3ecf2d43f647d2b4671df27f4f45606854604051610cc391815260200190565b60405180910390a160688054906000610cdb8361119d565b91905055505050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160e01b03198082169003610d955760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b604482015260640161083e565b6001600160e01b0319166000908152606560205260409020805460ff19166001179055565b600054610100900460ff16610de15760405162461bcd60e51b815260040161083e906111b6565b610680610ea5565b6000610dfc826301ffc9a760e01b610e1c565b80156102dd5750610e15826001600160e01b0319610e1c565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015610e8e575060208210155b8015610e9a5750600081115b979650505050505050565b600054610100900460ff16610ecc5760405162461bcd60e51b815260040161083e906111b6565b61068033610cea565b80608081018310156102dd57600080fd5b60008060a08385031215610ef957600080fd5b82359150610f0a8460208501610ed5565b90509250929050565b600060208284031215610f2557600080fd5b81356001600160e01b031981168114610a5857600080fd5b60008060808385031215610f5057600080fd5b8235915083608084011115610f6457600080fd5b50926020919091019150565b60008060408385031215610f8357600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610fa957600080fd5b919050565b60008060008060008060008060006101808a8c031215610fcd57600080fd5b610fd68a610f92565b9850610fe460208b01610f92565b9750610ff260408b01610f92565b965060608a0135955060808a0135945060a08a0135935060c08a0135925061101d8b60e08c01610ed5565b91506101608a013590509295985092959850929598565b60006020828403121561104657600080fd5b5035919050565b6001600160a01b03169052565b60006101e0820190508b82528a602083015289604083015288606083015287516080830152602088015160a0830152604088015160c0830152865160e08301526020870151610100830152604087015161012083015260608701516101408301526110c961016083018761104d565b6110d761018083018661104d565b6110e56101a083018561104d565b826101c08301529b9a5050505050505050505050565b60008060006060848603121561111057600080fd5b833592506020840135915061112760408501610f92565b90509250925092565b60006020828403121561114257600080fd5b610a5882610f92565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156102dd576102dd611161565b808201808211156102dd576102dd611161565b6000600182016111af576111af611161565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fef55002a98d02ddb9603f2cb836d9e9adc8af240206243d88874ae4e7bb2ca02aa264697066735822122008ede14645615592c865e72144c4703e84bc34f43873aef242f418ca8595fc5364736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ba5760003560e01c806301981029146100bf57806301ffc9a7146100d457806305395b6f146100fc57806318712c211461010f578063595777cd146101225780635eb399681461013557806361d027b31461015e578063715018a6146101895780638da5cb5b14610191578063a113438c14610199578063aa40cbd8146101ac578063c4d66de8146101bf578063f0f44260146101d2578063f2fde38b146101e5575b600080fd5b6100d26100cd366004610ee6565b6101f8565b005b6100e76100e2366004610f13565b6102a3565b60405190151581526020015b60405180910390f35b6100d261010a366004610f3d565b6102e3565b6100d261011d366004610f70565b6103de565b6100d2610130366004610fae565b610433565b610148610143366004611034565b6105af565b6040516100f39a9998979695949392919061105a565b606754610171906001600160a01b031681565b6040516001600160a01b0390911681526020016100f3565b6100d261066e565b610171610682565b6100d26101a7366004610f70565b610691565b6100d26101ba3660046110fb565b610704565b6100d26101cd366004611130565b6107a5565b6100d26101e0366004611130565b610913565b6100d26101f3366004611130565b610964565b6102006109dd565b8035158061021057506040810135155b1561022e576040516374235bdf60e11b815260040160405180910390fd5b6000606683815481106102435761024361114b565b600091825260209182902084356007600f939093029091019182015583820135600882015560408085013560098301556060850135600a8301555185815290925060008051602061120283398151915291015b60405180910390a1505050565b60006301ffc9a760e01b6001600160e01b0319831614806102dd57506001600160e01b0319821660009081526065602052604090205460ff165b92915050565b6102eb6109dd565b602081013561030d57604051630cea840760e21b815260040160405180910390fd5b604081013561032f5760405163a844960960e01b815260040160405180910390fd5b6000606683815481106103445761034461114b565b600091825260208220600f9091020191508290602002013560048201558160026020020135600682015560018101541580156103b057506066805461038b90600190611177565b8154811061039b5761039b61114b565b90600052602060002090600f02016000015483145b156103c057602082013560058201555b60405183815260008051602061120283398151915290602001610296565b6103e66109dd565b6000606683815481106103fb576103fb61114b565b90600052602060002090600f020190508181600e01819055506000805160206112028339815191528360405161029691815260200190565b61043b6109dd565b6000841161045c5760405163a844960960e01b815260040160405180910390fd5b8135158061046c57506040820135155b1561048a576040516374235bdf60e11b815260040160405180910390fd5b600085116104ab57604051630cea840760e21b815260040160405180910390fd5b6001600160a01b0388166104d25760405163d92e233d60e01b815260040160405180910390fd5b6104e3876352a88fdd60e01b610a3c565b61050057604051630b7d5ce760e11b815260040160405180910390fd5b6105a48989898660405180606001604052808c81526020018b81526020018a8152506040518060800160405280896000600481106105405761054061114b565b602002013581526020018960016004811061055d5761055d61114b565b602002013581526020018960026004811061057a5761057a61114b565b60200201358152602001896003600481106105975761059761114b565b6020020135905287610a5f565b505050505050505050565b606681815481106105bf57600080fd5b6000918252602091829020600f9091020180546001820154600283015460038401546040805160608082018352600488015482526005880154828a0152600688015482840152825160808101845260078901548152600889015499810199909952600988015492890192909252600a87015491880191909152600b860154600c870154600d880154600e9098015496995094979396929591946001600160a01b0391821693908216929116908a565b6106766109dd565b6106806000610cea565b565b6033546001600160a01b031690565b6000606683815481106106a6576106a661114b565b60009182526020909120600f90910201600d8101549091506001600160a01b031633146106e657604051634f1f214760e01b815260040160405180910390fd5b818160010160008282546106fa919061118a565b9091555050505050565b61070c6109dd565b6001600160a01b0381166107335760405163d92e233d60e01b815260040160405180910390fd5b6000606684815481106107485761074861114b565b6000918252602091829020600f9091020160028101859055600c810180546001600160a01b0319166001600160a01b038616179055604051868152909250600080516020611202833981519152910160405180910390a150505050565b600054610100900460ff16158080156107c55750600054600160ff909116105b806107df5750303b1580156107df575060005460ff166001145b6108475760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561086a576000805461ff0019166101001790555b6001600160a01b0382166108915760405163d92e233d60e01b815260040160405180910390fd5b606780546001600160a01b0319166001600160a01b03841617905560006068556108c163c35b377960e01b610d3c565b6108c9610dba565b801561090f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b61091b6109dd565b6001600160a01b0381166109425760405163d92e233d60e01b815260040160405180910390fd5b606780546001600160a01b0319166001600160a01b0392909216919091179055565b61096c6109dd565b6001600160a01b0381166109d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161083e565b6109da81610cea565b50565b336109e6610682565b6001600160a01b0316146106805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161083e565b6000610a4783610de9565b8015610a585750610a588383610e1c565b9392505050565b60685460009015610ae45760666001606854610a7b9190611177565b81548110610a8b57610a8b61114b565b90600052602060002090600f02016004016001015460666001606854610ab19190611177565b81548110610ac157610ac161114b565b90600052602060002090600f020160030154610add919061118a565b9050610ae8565b5060005b60666040518061014001604052806068548152602001600081526020018781526020018381526020018681526020018581526020018a6001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b031681526020018481525090806001815401808255809150506001900390600052602060002090600f020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401600082015181600001556020820151816001015560408201518160020155505060a08201518160070160008201518160000155602082015181600101556040820151816002015560608201518160030155505060c082015181600b0160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e082015181600c0160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061010082015181600d0160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061012082015181600e015550507f01a6d33d95d2560a8c53f00317beb1d0364b3ecf2d43f647d2b4671df27f4f45606854604051610cc391815260200190565b60405180910390a160688054906000610cdb8361119d565b91905055505050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160e01b03198082169003610d955760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b604482015260640161083e565b6001600160e01b0319166000908152606560205260409020805460ff19166001179055565b600054610100900460ff16610de15760405162461bcd60e51b815260040161083e906111b6565b610680610ea5565b6000610dfc826301ffc9a760e01b610e1c565b80156102dd5750610e15826001600160e01b0319610e1c565b1592915050565b604080516001600160e01b03198316602480830191909152825180830390910181526044909101909152602080820180516001600160e01b03166301ffc9a760e01b178152825160009392849283928392918391908a617530fa92503d91506000519050828015610e8e575060208210155b8015610e9a5750600081115b979650505050505050565b600054610100900460ff16610ecc5760405162461bcd60e51b815260040161083e906111b6565b61068033610cea565b80608081018310156102dd57600080fd5b60008060a08385031215610ef957600080fd5b82359150610f0a8460208501610ed5565b90509250929050565b600060208284031215610f2557600080fd5b81356001600160e01b031981168114610a5857600080fd5b60008060808385031215610f5057600080fd5b8235915083608084011115610f6457600080fd5b50926020919091019150565b60008060408385031215610f8357600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610fa957600080fd5b919050565b60008060008060008060008060006101808a8c031215610fcd57600080fd5b610fd68a610f92565b9850610fe460208b01610f92565b9750610ff260408b01610f92565b965060608a0135955060808a0135945060a08a0135935060c08a0135925061101d8b60e08c01610ed5565b91506101608a013590509295985092959850929598565b60006020828403121561104657600080fd5b5035919050565b6001600160a01b03169052565b60006101e0820190508b82528a602083015289604083015288606083015287516080830152602088015160a0830152604088015160c0830152865160e08301526020870151610100830152604087015161012083015260608701516101408301526110c961016083018761104d565b6110d761018083018661104d565b6110e56101a083018561104d565b826101c08301529b9a5050505050505050505050565b60008060006060848603121561111057600080fd5b833592506020840135915061112760408501610f92565b90509250925092565b60006020828403121561114257600080fd5b610a5882610f92565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156102dd576102dd611161565b808201808211156102dd576102dd611161565b6000600182016111af576111af611161565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fef55002a98d02ddb9603f2cb836d9e9adc8af240206243d88874ae4e7bb2ca02aa264697066735822122008ede14645615592c865e72144c4703e84bc34f43873aef242f418ca8595fc5364736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(address,address,address,uint256,uint256,uint256,uint256,uint256[4],bytes32)": {
        "params": {
          "_currencyPayout": ": address of the currency used for the royalty payout (zero-address if ETH)",
          "_merkle": ": merkle tree root used for whitelist",
          "_nft": ": NFT contract address",
          "_owner": ": right holder address",
          "_price": ": initial price in ETH of 1 NFT",
          "_rightHolderFee": ": right Holder fee on each mint (to be divided by 1e6)",
          "_royaltySharePerToken": ": total percentage of royalty evenly distributed among NFT holders (to be divided by 1e6)",
          "_salesInfo": ": Array of Timestamps at which the private and public sales are opened",
          "_supply": ": total number of NFT for this drop"
        }
      },
      "initialize(address)": {
        "params": {
          "_treasury": ": treasury address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMerkleRoot(uint256,bytes32)": {
        "params": {
          "_dropId": ":  drop identifier of the drop to be updated",
          "_merkle": ": the new merkle root to be set"
        }
      },
      "setRightHolderInfo(uint256,uint256,address)": {
        "params": {
          "_dropId": ":  drop identifier of the drop to be updated",
          "_owner": ": right holder address",
          "_rightHolderFee": ": fees paid to right holder"
        }
      },
      "setSalesInfo(uint256,uint256[4])": {
        "params": {
          "_dropId": ":  drop identifier of the drop to be updated",
          "_saleInfo": ": array containing the new information to be updated"
        }
      },
      "setTokenInfo(uint256,uint256[3])": {
        "params": {
          "_dropId": ":  drop identifier of the drop to be updated",
          "_tokenInfo": ": array containing the new informations to be updated"
        }
      },
      "setTreasury(address)": {
        "params": {
          "_newTreasury": ": new treasury address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateDropCounter(uint256,uint256)": {
        "params": {
          "_dropId": ": drop identifier",
          "_quantity": ": quantity of NFT sold"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "DropNotFound()": [
        {
          "notice": "Error returned if attempting to deposit reward for an inexistant drop*"
        }
      ],
      "EmptyDeposit()": [
        {
          "notice": "Error returned if the amount deposited is equal to 0*"
        }
      ],
      "IncorrectDeposit()": [
        {
          "notice": "Error returned if the sum of the _amounts in deposit is different than the ETH sent*"
        }
      ],
      "IncorrectInterface()": [
        {
          "notice": "Error returned if the contract passed as parameters does not implement the expected interface*"
        }
      ],
      "InsufficientMaxAmountPerAddress()": [
        {
          "notice": "Error returned if `maxAmountPerAddress` is smaller or equal to 0*"
        }
      ],
      "InsufficientRoyalties()": [
        {
          "notice": "Error returned if `royaltySharePerToken` is smaller or equal to 0*"
        }
      ],
      "InsufficientSupply()": [
        {
          "notice": "Error returned if `supply` is smaller or equal to 0*"
        }
      ],
      "NothingToClaim()": [
        {
          "notice": "Error returned if there is nothing to claim*"
        }
      ],
      "UnauthorizedUpdate()": [
        {
          "notice": "Error returned if an unauthorized address attempt to update the drop details*"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Error returned if `owner` address is the zero address*"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "create(address,address,address,uint256,uint256,uint256,uint256,uint256[4],bytes32)": {
        "notice": "Create a Drop  Only the contract owner can perform this operation"
      },
      "initialize(address)": {
        "notice": "Contract Initializer"
      },
      "setMerkleRoot(uint256,bytes32)": {
        "notice": "Update the merkle root (for allowlist) for the Drop `_dropId`  Only the contract owner can perform this operation"
      },
      "setRightHolderInfo(uint256,uint256,address)": {
        "notice": "Update the Drop `_dropId` drop information  Only the contract owner can perform this operation"
      },
      "setSalesInfo(uint256,uint256[4])": {
        "notice": "Update the Drop `_dropId` sale information  Only the contract owner can perform this operation"
      },
      "setTokenInfo(uint256,uint256[3])": {
        "notice": "Update the Drop `_dropId` token information  Only the contract owner can perform this operation  Return true if `tokenCount` and `supply` are updated, false otherwise"
      },
      "setTreasury(address)": {
        "notice": "Update the treasury address  Only the contract owner can perform this operation"
      },
      "updateDropCounter(uint256,uint256)": {
        "notice": "Update the Drop `_dropId` with new `_quantity` recently sold"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3885,
        "contract": "contracts/ABDropManager.sol:ABDropManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3888,
        "contract": "contracts/ABDropManager.sol:ABDropManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4499,
        "contract": "contracts/ABDropManager.sol:ABDropManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3757,
        "contract": "contracts/ABDropManager.sol:ABDropManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3877,
        "contract": "contracts/ABDropManager.sol:ABDropManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9827,
        "contract": "contracts/ABDropManager.sol:ABDropManager",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 16559,
        "contract": "contracts/ABDropManager.sol:ABDropManager",
        "label": "drops",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_struct(Drop)16594_storage)dyn_storage"
      },
      {
        "astId": 16561,
        "contract": "contracts/ABDropManager.sol:ABDropManager",
        "label": "treasury",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 16563,
        "contract": "contracts/ABDropManager.sol:ABDropManager",
        "label": "totalDrop",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Drop)16594_storage)dyn_storage": {
        "base": "t_struct(Drop)16594_storage",
        "encoding": "dynamic_array",
        "label": "struct ABDropManager.Drop[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Drop)16594_storage": {
        "encoding": "inplace",
        "label": "struct ABDropManager.Drop",
        "members": [
          {
            "astId": 16573,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "dropId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16575,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "sold",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16577,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "rightHolderFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16579,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "firstTokenIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16582,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "tokenInfo",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(TokenInfo)16601_storage"
          },
          {
            "astId": 16585,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "salesInfo",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(SaleInfo)16610_storage"
          },
          {
            "astId": 16587,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "currencyPayout",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          },
          {
            "astId": 16589,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "owner",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          },
          {
            "astId": 16591,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "nft",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 16593,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "14",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(SaleInfo)16610_storage": {
        "encoding": "inplace",
        "label": "struct ABDropManager.SaleInfo",
        "members": [
          {
            "astId": 16603,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "privateSaleMaxMint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16605,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "privateSaleTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16607,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "publicSaleMaxMint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16609,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "publicSaleTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenInfo)16601_storage": {
        "encoding": "inplace",
        "label": "struct ABDropManager.TokenInfo",
        "members": [
          {
            "astId": 16596,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16598,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "supply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16600,
            "contract": "contracts/ABDropManager.sol:ABDropManager",
            "label": "royaltySharePerToken",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}