{
  "address": "0x1E808A5763d65D659C6DA82449aA023ba7c6FBfA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "createdDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "grantAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int96",
          "name": "_flowRate",
          "type": "int96"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "issuedNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_abStream",
          "type": "address"
        }
      ],
      "name": "setABStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferredNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatedDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2fb7b0c0f0cad5bcbb053bbd3af23ec922d74cdad4c15b81003ce4b704caa646",
  "receipt": {
    "to": null,
    "from": "0x301933aEf6bB308f090087e9075ed5bFcBd3e0B3",
    "contractAddress": "0x1E808A5763d65D659C6DA82449aA023ba7c6FBfA",
    "transactionIndex": 0,
    "gasUsed": "491216",
    "logsBloom": "0x
    "blockHash": "0x9f548e85cb69124304b2e18a41e11be9b7da8fb8a6a1266f6f83b2dcf52a8c3e",
    "transactionHash": "0x2fb7b0c0f0cad5bcbb053bbd3af23ec922d74cdad4c15b81003ce4b704caa646",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1519399,
        "transactionHash": "0x2fb7b0c0f0cad5bcbb053bbd3af23ec922d74cdad4c15b81003ce4b704caa646",
        "address": "0x1E808A5763d65D659C6DA82449aA023ba7c6FBfA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000301933aef6bb308f090087e9075ed5bfcbd3e0b3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9f548e85cb69124304b2e18a41e11be9b7da8fb8a6a1266f6f83b2dcf52a8c3e"
      }
    ],
    "blockNumber": 1519399,
    "cumulativeGasUsed": "491216",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bd35823e815febe6089fac5787cd3f59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createdDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"grantAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int96\",\"name\":\"_flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"issuedNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_abStream\",\"type\":\"address\"}],\"name\":\"setABStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferredNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AnotherRelay.sol\":\"ABRelay\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title ICrossDomainMessenger\\n */\\ninterface ICrossDomainMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(\\n        address indexed target,\\n        address sender,\\n        bytes message,\\n        uint256 messageNonce,\\n        uint256 gasLimit\\n    );\\n    event RelayedMessage(bytes32 indexed msgHash);\\n    event FailedRelayedMessage(bytes32 indexed msgHash);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f29ae23021345a20ccac7b5edb3fc38268aef943b65adc8a32e74b80bf1833a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/AnotherRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/* Openzeppelin Contract */\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/* Optimism Interface */\\nimport { ICrossDomainMessenger } from \\\"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\\\";\\n\\n/* Custom Imports */\\nimport { IABStream } from \\\"./interfaces/IABStream.sol\\\";\\n\\ncontract ABRelay is Ownable {\\n  // Addresses allowed to interact with the relay\\n  mapping(address => bool) private allowedSenders;\\n\\n  // Optimism CrossDomainMessenger contract\\n  ICrossDomainMessenger internal messenger =\\n    ICrossDomainMessenger(0x4200000000000000000000000000000000000007);\\n\\n  IABStream internal abStream;\\n\\n  /*\\n   **************************************************************************\\n   *                             ONLY OWNER                                 *\\n   **************************************************************************\\n   */\\n\\n  function grantAllowance(address _sender) external onlyOwner {\\n    allowedSenders[_sender] = true;\\n  }\\n\\n  function revokeAllowance(address _sender) external onlyOwner {\\n    allowedSenders[_sender] = false;\\n  }\\n\\n  function setABStream(address _abStream) external onlyOwner {\\n    abStream = IABStream(_abStream);\\n  }\\n\\n  /*\\n   **************************************************************************\\n   *                            ONLY ALLOWED                                *\\n   **************************************************************************\\n   */\\n\\n  function issuedNFT(int96 _flowRate, uint256 _tokenId) external onlyAllowed {\\n    abStream.initStream(_flowRate, _tokenId);\\n  }\\n\\n  function transferredNFT(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  ) external onlyAllowed {\\n    abStream.updateStream(_from, _to, _tokenId);\\n  }\\n\\n  function createdDrop() external onlyAllowed {}\\n\\n  function updatedDrop() external onlyAllowed {}\\n\\n  /*\\n   **************************************************************************\\n   *                              MODIFIERS                                 *\\n   **************************************************************************\\n   */\\n\\n  modifier onlyAllowed() {\\n    require(\\n      msg.sender == address(messenger) &&\\n        allowedSenders[messenger.xDomainMessageSender()]\\n    );\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd17b867a7902ce716a4d6fccc6b9507f9e755cdc368d00179019758deceb1180\",\"license\":\"MIT\"},\"contracts/interfaces/IABStream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IABStream {\\n  function initStream(int96 flowRate, uint256 tokenId) external;\\n\\n  function updateStream(\\n    address previousReceiver,\\n    address newReceiver,\\n    uint256 tokenId\\n  ) external;\\n\\n  function setABToken(address _ABToken) external;\\n\\n  function getABToken() external view returns (address);\\n\\n  function getABRelay() external view returns (address);\\n\\n  function getFlow(address _receiver)\\n    external\\n    view\\n    returns (\\n      uint256 timestamp,\\n      int96 flowRate,\\n      uint256 deposit,\\n      uint256 owedDeposit\\n    );\\n}\\n\",\"keccak256\":\"0xe71539d532f912960eb96e02b7b4b7f4200d845cce2667701f9e136e5ba74eb3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600280546001600160a01b03191673420000000000000000000000000000000000000717905534801561003657600080fd5b5061004033610045565b610095565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610710806100a46000396000f3fe608060405234801561001057600080fd5b506004361061008e5760003560e01c80630148f9e514610093578063709bb22f146100a8578063715018a6146100b05780637ea41543146100b85780638da5cb5b146100cb578063a9cf5514146100ef578063ad11fe4414610102578063c2df4e3914610115578063f07d9a44146100a8578063f2fde38b14610128575b600080fd5b6100a66100a1366004610626565b61013b565b005b6100a6610165565b6100a661021e565b6100a66100c6366004610626565b610230565b6100d361025f565b6040516001600160a01b03909116815260200160405180910390f35b6100a66100fd36600461064a565b61026e565b6100a6610110366004610626565b610398565b6100a661012336600461068b565b6103c1565b6100a6610136366004610626565b6104e4565b610143610562565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633148015610213575060016000600260009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f591906106bd565b6001600160a01b0316815260208101919091526040016000205460ff165b61021c57600080fd5b565b610226610562565b61021c60006105c1565b610238610562565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b031690565b6002546001600160a01b03163314801561031c575060016000600260009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe91906106bd565b6001600160a01b0316815260208101919091526040016000205460ff165b61032557600080fd5b6003546040516321a23ca360e11b81526001600160a01b03858116600483015284811660248301526044820184905290911690634344794690606401600060405180830381600087803b15801561037b57600080fd5b505af115801561038f573d6000803e3d6000fd5b50505050505050565b6103a0610562565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6002546001600160a01b03163314801561046f575060016000600260009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906106bd565b6001600160a01b0316815260208101919091526040016000205460ff165b61047857600080fd5b60035460405163693c623d60e01b8152600b84900b6004820152602481018390526001600160a01b039091169063693c623d90604401600060405180830381600087803b1580156104c857600080fd5b505af11580156104dc573d6000803e3d6000fd5b505050505050565b6104ec610562565b6001600160a01b0381166105565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61055f816105c1565b50565b3361056b61025f565b6001600160a01b03161461021c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161054d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461055f57600080fd5b60006020828403121561063857600080fd5b813561064381610611565b9392505050565b60008060006060848603121561065f57600080fd5b833561066a81610611565b9250602084013561067a81610611565b929592945050506040919091013590565b6000806040838503121561069e57600080fd5b823580600b0b81146106af57600080fd5b946020939093013593505050565b6000602082840312156106cf57600080fd5b81516106438161061156fea2646970667358221220ebc330d0bef72976e0b3a36a55e6df190aca9f1feab03a85939869a1eea1666f64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061008e5760003560e01c80630148f9e514610093578063709bb22f146100a8578063715018a6146100b05780637ea41543146100b85780638da5cb5b146100cb578063a9cf5514146100ef578063ad11fe4414610102578063c2df4e3914610115578063f07d9a44146100a8578063f2fde38b14610128575b600080fd5b6100a66100a1366004610626565b61013b565b005b6100a6610165565b6100a661021e565b6100a66100c6366004610626565b610230565b6100d361025f565b6040516001600160a01b03909116815260200160405180910390f35b6100a66100fd36600461064a565b61026e565b6100a6610110366004610626565b610398565b6100a661012336600461068b565b6103c1565b6100a6610136366004610626565b6104e4565b610143610562565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633148015610213575060016000600260009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f591906106bd565b6001600160a01b0316815260208101919091526040016000205460ff165b61021c57600080fd5b565b610226610562565b61021c60006105c1565b610238610562565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b031690565b6002546001600160a01b03163314801561031c575060016000600260009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe91906106bd565b6001600160a01b0316815260208101919091526040016000205460ff165b61032557600080fd5b6003546040516321a23ca360e11b81526001600160a01b03858116600483015284811660248301526044820184905290911690634344794690606401600060405180830381600087803b15801561037b57600080fd5b505af115801561038f573d6000803e3d6000fd5b50505050505050565b6103a0610562565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6002546001600160a01b03163314801561046f575060016000600260009054906101000a90046001600160a01b03166001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906106bd565b6001600160a01b0316815260208101919091526040016000205460ff165b61047857600080fd5b60035460405163693c623d60e01b8152600b84900b6004820152602481018390526001600160a01b039091169063693c623d90604401600060405180830381600087803b1580156104c857600080fd5b505af11580156104dc573d6000803e3d6000fd5b505050505050565b6104ec610562565b6001600160a01b0381166105565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61055f816105c1565b50565b3361056b61025f565b6001600160a01b03161461021c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161054d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461055f57600080fd5b60006020828403121561063857600080fd5b813561064381610611565b9392505050565b60008060006060848603121561065f57600080fd5b833561066a81610611565b9250602084013561067a81610611565b929592945050506040919091013590565b6000806040838503121561069e57600080fd5b823580600b0b81146106af57600080fd5b946020939093013593505050565b6000602082840312156106cf57600080fd5b81516106438161061156fea2646970667358221220ebc330d0bef72976e0b3a36a55e6df190aca9f1feab03a85939869a1eea1666f64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4901,
        "contract": "contracts/AnotherRelay.sol:ABRelay",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15960,
        "contract": "contracts/AnotherRelay.sol:ABRelay",
        "label": "allowedSenders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15966,
        "contract": "contracts/AnotherRelay.sol:ABRelay",
        "label": "messenger",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ICrossDomainMessenger)987"
      },
      {
        "astId": 15969,
        "contract": "contracts/AnotherRelay.sol:ABRelay",
        "label": "abStream",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IABStream)18979"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IABStream)18979": {
        "encoding": "inplace",
        "label": "contract IABStream",
        "numberOfBytes": "20"
      },
      "t_contract(ICrossDomainMessenger)987": {
        "encoding": "inplace",
        "label": "contract ICrossDomainMessenger",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}