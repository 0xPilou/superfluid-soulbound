{
  "language": "Solidity",
  "sources": {
    "contracts/Store.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ISuperSoulbound.sol\";\n\ncontract Store is Ownable {\n  // Token address used for payment\n  address public token;\n\n  struct Item {\n    uint256 quantity;\n    uint256 price;\n  }\n\n  mapping(uint256 => Item) public items;\n\n  event Redeemed(address buyer, uint256 itemId, uint256 quantity);\n  event UpdatedInventory(uint256 itemId, uint256 quantity, uint256 price);\n\n  function redeem(uint256 _itemId, uint256 _quantity) external {\n    Item storage item = items[_itemId];\n\n    require(item.quantity >= _quantity, \"Out Of Stock\");\n    // require(balanceOf(user) >= item.price * item.quantity, \"Insufficient Funds\");\n\n    ISuperSoulbound(token).burn(msg.sender, item.quantity * item.price, \"0x\");\n    item.quantity -= _quantity;\n    emit Redeemed(msg.sender, _itemId, _quantity);\n  }\n\n  function addItem(\n    uint256 _itemId,\n    uint256 _quantity,\n    uint256 _price\n  ) external onlyOwner {\n    Item memory item;\n    item.quantity = _quantity;\n    item.price = _price;\n\n    items[_itemId] = item;\n\n    emit UpdatedInventory(_itemId, _quantity, _price);\n  }\n\n  function setToken(address _token) external onlyOwner {\n    require(_token != address(0), \"zero address\");\n    token = _token;\n  }\n}\n"
    },
    "contracts/interfaces/ISuperSoulbound.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity ^0.8.14;\n\ninterface ISuperSoulbound {\n  /// @notice Mints tokens, only the owner may do this\n  /// @param receiver Receiver of minted tokens\n  /// @param amount Amount to mint\n  function mint(\n    address receiver,\n    uint256 amount,\n    bytes memory userData\n  ) external;\n\n  /// @notice Burns from message sender\n  /// @param amount Amount to burn\n  function burn(\n    address _from,\n    uint256 amount,\n    bytes memory userData\n  ) external;\n\n  function approveStore(uint256 _amount) external;\n\n  function setStore(address _store) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}