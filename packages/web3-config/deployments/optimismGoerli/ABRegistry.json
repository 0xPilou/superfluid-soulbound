{
  "address": "0x0F2621C34e2bd769E91209F929D13b16D33D9332",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FORBIDDEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_PARAMETER",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dropId",
          "type": "uint256"
        }
      ],
      "name": "getUserBalancePerDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dropId",
          "type": "uint256"
        }
      ],
      "name": "updateBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x174c42c74a088844ee97a29a97e51ee16c28123b475932887cd82a668b86a16c",
  "receipt": {
    "to": null,
    "from": "0x301933aEf6bB308f090087e9075ed5bFcBd3e0B3",
    "contractAddress": "0x0F2621C34e2bd769E91209F929D13b16D33D9332",
    "transactionIndex": 0,
    "gasUsed": "332654",
    "logsBloom": "0x
    "blockHash": "0x616ccd6a08664889212fcc8df5bd131b72ce877f896e3f70b64f28b465aee47f",
    "transactionHash": "0x174c42c74a088844ee97a29a97e51ee16c28123b475932887cd82a668b86a16c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1738061,
        "transactionHash": "0x174c42c74a088844ee97a29a97e51ee16c28123b475932887cd82a668b86a16c",
        "address": "0x0F2621C34e2bd769E91209F929D13b16D33D9332",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000301933aef6bb308f090087e9075ed5bfcbd3e0b3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x616ccd6a08664889212fcc8df5bd131b72ce877f896e3f70b64f28b465aee47f"
      }
    ],
    "blockNumber": 1738061,
    "cumulativeGasUsed": "332654",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x71E0F19Db5cE7B4DE40cbD3d8DF06f446A06a9c8"
  ],
  "numDeployments": 1,
  "solcInputHash": "6cf8006ebe61699f5df0e1bda1ff70aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FORBIDDEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_PARAMETER\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"}],\"name\":\"getUserBalancePerDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"}],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FORBIDDEN()\":[{\"details\":\"Thrown when the caller is not authorized to call the function\"}],\"INVALID_PARAMETER()\":[{\"details\":\"Thrown when the passed parameter is invalid\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"AB_RELAY\":{\"details\":\"Address of Anotherblock Relay (used to control the streams destination based on L1 messages)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ABRegistry.sol\":\"ABRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ABRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/* Openzeppelin Contract */\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @dev Thrown when the caller is not authorized to call the function\\nerror FORBIDDEN();\\n\\n/// @dev Thrown when the passed parameter is invalid\\nerror INVALID_PARAMETER();\\n\\ncontract ABRegistry is Ownable {\\n  /// @dev Address of Anotherblock Relay (used to control the streams destination based on L1 messages)\\n  address internal AB_RELAY;\\n\\n  mapping(address => mapping(uint256 => uint256)) private userBalancePerDrop;\\n\\n  constructor(address _relay) {\\n    if (_relay == address(0)) revert INVALID_PARAMETER();\\n    AB_RELAY = _relay;\\n  }\\n\\n  function updateBalance(\\n    address _from,\\n    address _to,\\n    uint256 _dropId\\n  ) external {\\n    if (msg.sender != AB_RELAY) revert FORBIDDEN();\\n    if (_from != address(0)) userBalancePerDrop[_from][_dropId] -= 1;\\n    if (_to != address(0)) userBalancePerDrop[_to][_dropId] += 1;\\n  }\\n\\n  function getUserBalancePerDrop(address _user, uint256 _dropId)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return userBalancePerDrop[_user][_dropId];\\n  }\\n}\\n\",\"keccak256\":\"0x590dbfb51094e31bb6cdf9fc60cdca85ee013020b12a07903f93552cc1c7f9cb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161053838038061053883398101604081905261002f916100d4565b61003833610084565b6001600160a01b03811661005f57604051632627b42d60e11b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055610104565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100e657600080fd5b81516001600160a01b03811681146100fd57600080fd5b9392505050565b610425806101136000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806334954a991461005c578063715018a6146100715780638da5cb5b14610079578063e04cc2d71461009e578063f2fde38b146100bf575b600080fd5b61006f61006a36600461032b565b6100d2565b005b61006f610194565b6100816101a8565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b16100ac366004610367565b6101b7565b604051908152602001610095565b61006f6100cd366004610391565b6101e2565b6001546001600160a01b031633146100fd5760405163036be76f60e61b815260040160405180910390fd5b6001600160a01b03831615610146576001600160a01b038316600090815260026020908152604080832084845290915281208054600192906101409084906103c9565b90915550505b6001600160a01b0382161561018f576001600160a01b038216600090815260026020908152604080832084845290915281208054600192906101899084906103dc565b90915550505b505050565b61019c610260565b6101a660006102bf565b565b6000546001600160a01b031690565b6001600160a01b03821660009081526002602090815260408083208484529091529020545b92915050565b6101ea610260565b6001600160a01b0381166102545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61025d816102bf565b50565b336102696101a8565b6001600160a01b0316146101a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461032657600080fd5b919050565b60008060006060848603121561034057600080fd5b6103498461030f565b92506103576020850161030f565b9150604084013590509250925092565b6000806040838503121561037a57600080fd5b6103838361030f565b946020939093013593505050565b6000602082840312156103a357600080fd5b6103ac8261030f565b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156101dc576101dc6103b3565b808201808211156101dc576101dc6103b356fea26469706673582212201312c2caf6af23729c668da1a91cdeaaecf5945d6602233eaa76fb5c3804889864736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806334954a991461005c578063715018a6146100715780638da5cb5b14610079578063e04cc2d71461009e578063f2fde38b146100bf575b600080fd5b61006f61006a36600461032b565b6100d2565b005b61006f610194565b6100816101a8565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b16100ac366004610367565b6101b7565b604051908152602001610095565b61006f6100cd366004610391565b6101e2565b6001546001600160a01b031633146100fd5760405163036be76f60e61b815260040160405180910390fd5b6001600160a01b03831615610146576001600160a01b038316600090815260026020908152604080832084845290915281208054600192906101409084906103c9565b90915550505b6001600160a01b0382161561018f576001600160a01b038216600090815260026020908152604080832084845290915281208054600192906101899084906103dc565b90915550505b505050565b61019c610260565b6101a660006102bf565b565b6000546001600160a01b031690565b6001600160a01b03821660009081526002602090815260408083208484529091529020545b92915050565b6101ea610260565b6001600160a01b0381166102545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61025d816102bf565b50565b336102696101a8565b6001600160a01b0316146101a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461032657600080fd5b919050565b60008060006060848603121561034057600080fd5b6103498461030f565b92506103576020850161030f565b9150604084013590509250925092565b6000806040838503121561037a57600080fd5b6103838361030f565b946020939093013593505050565b6000602082840312156103a357600080fd5b6103ac8261030f565b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156101dc576101dc6103b3565b808201808211156101dc576101dc6103b356fea26469706673582212201312c2caf6af23729c668da1a91cdeaaecf5945d6602233eaa76fb5c3804889864736f6c63430008100033",
  "devdoc": {
    "errors": {
      "FORBIDDEN()": [
        {
          "details": "Thrown when the caller is not authorized to call the function"
        }
      ],
      "INVALID_PARAMETER()": [
        {
          "details": "Thrown when the passed parameter is invalid"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "AB_RELAY": {
        "details": "Address of Anotherblock Relay (used to control the streams destination based on L1 messages)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 46,
        "contract": "contracts/ABRegistry.sol:ABRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4296,
        "contract": "contracts/ABRegistry.sol:ABRegistry",
        "label": "AB_RELAY",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4302,
        "contract": "contracts/ABRegistry.sol:ABRegistry",
        "label": "userBalancePerDrop",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}